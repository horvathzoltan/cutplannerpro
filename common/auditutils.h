#pragma once

#include "service/storageaudit/auditcontextbuilder.h"
#include "common/logger.h"
#include "model/cutting/plan/cutplan.h"
#include "model/storageaudit/storageauditrow.h"

#include <QMap>

namespace AuditUtils {

static const bool _isVerbose = false;

inline void injectPlansIntoAuditRows(const QVector<Cutting::Plan::CutPlan>& plans,
                                     QVector<StorageAuditRow>* auditRows)
{
    if (!auditRows) {
        zWarning(L("‚ö†Ô∏è Audit sorok injekt√°l√°sa sikertelen: auditRows=nullptr"));
        return;
    }

    // üîπ √ñsszes√≠tett anyagig√©ny stock eset√©n (materialId ‚Üí darabsz√°m)
    QMap<QUuid, int> requiredStockMaterials;
    for (const auto& plan : plans) {
        if (plan.source == Cutting::Plan::Source::Stock) {
            requiredStockMaterials[plan.materialId] += 1; // minden CutPlan = 1 r√∫d
        }
    }

    // üîÑ Audit sorok friss√≠t√©se a v√°g√°si terv alapj√°n
    for (auto& row : *auditRows) {
        switch (row.sourceType) {
        case AuditSourceType::Leftover: {
            // Hull√≥ audit: barcode alapj√°n √∂sszevet√©s
            for (const auto& plan : plans) {
                if (plan.source == Cutting::Plan::Source::Reusable &&
                    plan.rodId == row.barcode) {
                    row.isInOptimization = true;
                    row.pickingQuantity  = 1; // hull√≥k mindig 1 db
                    //row.rowPresence         = AuditPresence::Present;
                    break;
                }
            }
            break;
        }
        case AuditSourceType::Stock: {
            if (requiredStockMaterials.contains(row.materialId)) {
                // minden sor a csoportban r√©sze az optimaliz√°ci√≥nak
                row.isInOptimization = true;
                row.pickingQuantity = 0; // sor szinten nincs kioszt√°s
                // a totalExpected-et majd a context kapja meg
            }
            break;
        }

        // case AuditSourceType::Stock: {
        //     if (requiredStockMaterials.contains(row.materialId)) {
        //         int& remaining = requiredStockMaterials[row.materialId];
        //         if (remaining > 0) {
        //             row.pickingQuantity = 1;
        //             row.isInOptimization = true;
        //             row.presence = (row.actualQuantity >= 1)
        //                                ? AuditPresence::Present
        //                                : AuditPresence::Missing;
        //             --remaining;
        //         }
        //     }
        //     break;
        // }
        // case AuditSourceType::Stock: {
        //     if (requiredStockMaterials.contains(row.materialId)) {
        //         int& remaining = requiredStockMaterials[row.materialId];
        //         if (remaining > 0) {
        //             row.isInOptimization = true;
        //             row.pickingQuantity = 0;//remaining; // teljes ig√©ny
        //             // row.rowPresence = (row.actualQuantity >= remaining)
        //             //                    ? AuditPresence::Present
        //             //                    : AuditPresence::Missing;
        //             remaining = 0; // egyszer kiosztva
        //         }
        //     }
        //     break;
        // }


        default:
            // Egy√©b forr√°st√≠pusok (ha lesznek a j√∂v≈ëben)
            row.isInOptimization = false;
            break;
        }

        if(_isVerbose){
            // üìã Debug: injekt√°lt √©rt√©kek soronk√©nt
            zInfo(QString("[AuditInject] rowId=%1 | matId=%2 | expected(picking)=%3 | actual=%4 | inOpt=%5")
                      .arg(row.rowId.toString())
                      .arg(row.materialId.toString())
                      .arg(row.pickingQuantity)
                      .arg(row.actualQuantity)
                      .arg(row.isInOptimization));

            // üß† Debug: AuditContext aggreg√°lt √©rt√©kek, ha el√©rhet≈ë
            if (row.context) {
                zInfo(QString("[AuditContext] matId=%1 | expected=%2 | actual=%3 | rows=%4")
                           .arg(row.materialId.toString())
                           .arg(row.context->totalExpected)
                           .arg(row.context->totalActual)
                           .arg(row.context->group.size()));
            }

            // ‚ö†Ô∏è Warning: hull√≥ sor csoportba ker√ºlt (nem k√©ne)
            if (row.sourceType == AuditSourceType::Leftover &&
                row.context && row.context->group.isGroup()) {
                zWarning(QString("‚ö†Ô∏è Hull√≥ sor csoportba ker√ºlt! rowId=%1 | matId=%2 | groupSize=%3")
                             .arg(row.rowId.toString())
                             .arg(row.materialId.toString())
                             .arg(row.context->group.size()));
            }

            // ‚ö†Ô∏è Warning: negat√≠v hi√°ny (hib√°s aggreg√°l√°s vagy t√∫l sok actual)
            int missing = row.missingQuantity();
            if (missing < 0) {
                zWarning(QString("‚ö†Ô∏è Negat√≠v hi√°ny! rowId=%1 | matId=%2 | missing=%3")
                             .arg(row.rowId.toString())
                             .arg(row.materialId.toString())
                             .arg(missing));
            }
        }
    }

    zInfo(L("üîÑ Audit sorok friss√≠tve a v√°g√°si terv alapj√°n ‚Äî √∂sszes sor: %1")
              .arg(auditRows->size()));
}

/**
 * @brief Kontextus hozz√°rendel√©se audit sorokhoz.
 *        Minden sor kap egy AuditContext pointert, amely tartalmazza a csoportos√≠tott adatokat.
 *
 * A csoportos√≠t√°s kulcsa: materialId + storageName
 * A context tartalmazza:
 * - √∂sszes√≠tett elv√°rt mennyis√©get (totalExpected)
 * - √∂sszes√≠tett t√©nyleges mennyis√©get (totalActual)
 * - az adott csoporthoz tartoz√≥ sorok azonos√≠t√≥it (rowIds)
 *
 * Ez az alapja a st√°tusz, hi√°nyz√≥, tooltip √©s UI megjelen√≠t√©snek.
 */
inline void assignContextsToRows(QVector<StorageAuditRow>* auditRows,
                                 const QMap<QUuid,int>& requiredStockMaterials)
{
    if (!auditRows) {
        zWarning(L("‚ö†Ô∏è Kontextus hozz√°rendel√©se sikertelen: auditRows=nullptr"));
        return;
    }

    auto contextMap = AuditContextBuilder::buildFromRows(*auditRows, requiredStockMaterials);
    for (auto& row : *auditRows) {
        row.context = contextMap.value(row.rowId);
    }

    // üîÑ Csoportos√≠t√°s kulcs alapj√°n: minden context megkapja a hozz√° tartoz√≥ sorokat
    QMap<QString, QList<StorageAuditRow*>> groupMap;
    for (auto& row : *auditRows) {
        QString key = AuditContextBuilder::makeGroupKey(row);
        groupMap[key].append(&row);
    }

    for (auto& row : *auditRows) {
        QString key = AuditContextBuilder::makeGroupKey(row);
        if (row.context) {
            row.context->setGroupRows(groupMap.value(key));
        }
    }

    zInfo(L("üîó AuditContext hozz√°rendelve minden sorhoz ‚Äî √∂sszes sor: %1")
              .arg(auditRows->size()));

    // for (auto& row : *auditRows) {
    //     zInfo(QString("rowId=%1 | matId=%2 | rootStorageId=%3 | groupKey=%4 | expected=%5 | actual=%6 | contextPtr=%7")
    //               .arg(row.rowId.toString())
    //               .arg(row.materialId.toString())
    //               .arg(row.rootStorageId.toString())
    //               .arg(AuditContextBuilder::makeGroupKey(row))
    //               .arg(row.context ? row.context->totalExpected : -1)
    //               .arg(row.context ? row.context->totalActual : -1)
    //               .arg((quintptr)(row.context ? row.context.get() : nullptr), 0, 16));
    // }

}


} // namespace AuditUtils
