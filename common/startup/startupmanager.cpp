#include "startupmanager.h"
#include "../../model/repositories/materialrepository.h"
#include "../../model/registries/materialregistry.h"
#include "../../model/material/materialmaster.h"
#include "common/logger.h"
#include "model/registries/cuttingplanrequestregistry.h"
//#include "model/stockentry.h"

#include <model/repositories/materialgrouprepository.h>
#include <model/registries//stockregistry.h>
#include <model/repositories/cuttingrequestrepository.h>
#include <model/repositories/leftoverstockrepository.h>
#include <model/repositories/stockrepository.h>
#include <model/repositories/storagerepository.h>

#include <QSet>

#include <model/repositories/cuttingmachinerepository.h>
#include <model/registries/cuttingmachineregistry.h>
#include <common/eventlogger.h>
#include <common/filenamehelper.h>

#include "common/color/namedcolor.h"

StartupStatus StartupManager::runStartupSequence() {
    StartupStatus ralColorStatus = initRalColors();
    if (!ralColorStatus.isSuccess())
        return ralColorStatus;

    StartupStatus materialStatus = initMaterialRegistry();
    if (!materialStatus.isSuccess())
        return materialStatus;

    StartupStatus storageStatus = initStorageRegistry();
    if (!storageStatus.isSuccess())
        return storageStatus;

    StartupStatus groupStatus = initMaterialGroupRegistry();
    if (!groupStatus.isSuccess())
        return groupStatus;

    StartupStatus stockStatus = initStockRegistry();
    if (!stockStatus.isSuccess())
        return stockStatus;

    StartupStatus reusableStockStatus = initReusableStockRegistry();
    if (!reusableStockStatus.isSuccess())
        return reusableStockStatus;

    //CuttingRequestRepository::tryLoadFromSettings(CuttingRequestRegistry::instance());
    StartupStatus cuttingReqStatus = initCuttingRequestRegistry();
    if (!cuttingReqStatus.isSuccess())
        return cuttingReqStatus;

    StartupStatus cuttingMachineStatus = initCuttingMachineRegistry();
    if (!cuttingMachineStatus.isSuccess())
        return cuttingMachineStatus;

    StartupStatus finalStatus = StartupStatus::success();
    finalStatus.addWarnings(ralColorStatus.warnings());

    finalStatus.addWarnings(materialStatus.warnings());
    finalStatus.addWarnings(groupStatus.warnings());
    finalStatus.addWarnings(stockStatus.warnings());
    finalStatus.addWarnings(reusableStockStatus.warnings());
    finalStatus.addWarnings(cuttingReqStatus.warnings());
    finalStatus.addWarnings(cuttingMachineStatus.warnings());

    EventLogger::instance().zEvent(QString("üå± Init √∂sszefoglal√≥: %1 anyag, %2 g√©p, %3 stock, %4 leftover")
                                       .arg(MaterialRegistry::instance().readAll().size())
                                       .arg(CuttingMachineRegistry::instance().readAll().size())
                                       .arg(StockRegistry::instance().readAll().size())
                                       .arg(LeftoverStockRegistry::instance().readAll().size()));

    return finalStatus;
}

StartupStatus StartupManager::initMaterialRegistry() {
    bool loaded = MaterialRepository::loadFromCSV(MaterialRegistry::instance());
    if (!loaded){
        EventLogger::instance().zEvent("‚ùå Nem siker√ºlt bet√∂lteni az anyagt√∂rzset");

        return StartupStatus::failure("‚ùå Nem siker√ºlt bet√∂lteni az anyagt√∂rzset a CSV f√°jlb√≥l.");
    }

    const auto& all = MaterialRegistry::instance().readAll();

    if (!hasMinimumMaterials(2)){
        EventLogger::instance().zEvent("‚ùå t√∫l kev√©s adat az anyagt√∂rzsben");

        return StartupStatus::failure(
            QString("‚ö†Ô∏è T√∫l kev√©s anyag tal√°lhat√≥ a t√∂rzsben (%1 db). Legal√°bb 2 sz√ºks√©ges.")
                .arg(all.size()));
    }

    StartupStatus status = StartupStatus::success();

    // üîé Valid√°ci√≥: csoportban szerepl≈ë ismeretlen anyagok
    QSet<QUuid> knownMaterials;
    for (const auto& mat : all)
        knownMaterials.insert(mat.id);

    const auto& groupList = MaterialGroupRegistry::instance().readAll();
    QStringList invalidGroups;

    for (const auto& group : groupList) {
        for (const auto& mid : group.materialIds) {
            if (!knownMaterials.contains(mid)) {
                invalidGroups << group.name;
                break;
            }
        }
    }

    if (!invalidGroups.isEmpty()) {
        EventLogger::instance().zEvent("‚ö†Ô∏è az anyagcsoport adatai hib√°s elemeket tartalmaznak.");
        status.addWarning(
            QString("‚ö†Ô∏è %1 csoport olyan anyagot tartalmaz, ami nincs a t√∂rzsben.\nEllen≈ërizd a groups.csv f√°jlt: %2")
                .arg(invalidGroups.size())
                .arg(invalidGroups.join(", "))
            );
    }

    EventLogger::instance().zEvent(StatusHelper::getMessage(status.isSuccess(),"anyagt√∂rzs init"));
    return status;
}

StartupStatus StartupManager::initStorageRegistry() {
    bool loaded = StorageRepository::loadFromCSV(StorageRegistry::instance());
    if (!loaded){
        EventLogger::instance().zEvent("‚ùå Nem siker√ºlt bet√∂lteni a rakt√°r t√∂rzset");

        return StartupStatus::failure("‚ùå Nem siker√ºlt bet√∂lteni a storage.csv f√°jlb√≥l a rakt√°r t√∂rzset.");
    }

    const auto& entries = StorageRegistry::instance().readAll();
    if (entries.isEmpty()){
        EventLogger::instance().zEvent("‚ùå nincs adat a rakt√°r t√∂rzsben");

        return StartupStatus::failure("‚ö†Ô∏è A rakt√°r t√∂rzs √ºres. Legal√°bb 1 rakt√°ri bejegyz√©s sz√ºks√©ges.");
    }

    StartupStatus status = StartupStatus::success();

    // üîé Valid√°ci√≥: parentId mez≈ëk csak l√©tez≈ë bejegyz√©sre mutassanak
    QSet<QUuid> knownIds;
    for (const auto& entry : entries)
        knownIds.insert(entry.id);

    QStringList invalidParentRefs;
    for (const auto& entry : entries) {
        if (!entry.parentId.isNull() && !knownIds.contains(entry.parentId)) {
            invalidParentRefs << entry.name;
        }
    }

    if (!invalidParentRefs.isEmpty()) {
        EventLogger::instance().zEvent("‚ùå a rakt√°r t√∂rzs adatai hib√°s elemeket tartalmaznak.");
        status.addWarning(
            QString("‚ö†Ô∏è %1 storage elem nem l√©tez≈ë sz√ºl≈ëre hivatkozik.\n√ârintett bejegyz√©sek: %2")
                .arg(invalidParentRefs.size())
                .arg(invalidParentRefs.join(", "))
            );
    }

    EventLogger::instance().zEvent(StatusHelper::getMessage(status.isSuccess(),"rakt√°r t√∂rzs init"));
    return status;
}


StartupStatus StartupManager::initStockRegistry() {
    bool loaded = StockRepository::loadFromCSV(StockRegistry::instance());
    if (!loaded){
        EventLogger::instance().zEvent("‚ùå Nem siker√ºlt bet√∂lteni a k√©szletet");
        return StartupStatus::failure("‚ùå Nem siker√ºlt bet√∂lteni a k√©szletet a CSV f√°jlb√≥l).");
    }
    const auto& all = MaterialRegistry::instance().readAll();

    if (all.isEmpty()){
        EventLogger::instance().zEvent("‚ùå nincs adat a k√©szletben");

        return StartupStatus::failure("‚ö†Ô∏è A k√©szlet √ºres. Legal√°bb 1 t√©tel sz√ºks√©ges a m≈±k√∂d√©shez.");
    }

    StartupStatus status = StartupStatus::success();

    // üîé Valid√°ci√≥: minden stock-entry ismert anyagra hivatkozzon
    QSet<QUuid> knownMaterials;
    for (const auto& mat : all)
        knownMaterials.insert(mat.id);

    QStringList invalidStockItems;

    for (const auto& entry : all) {
        if (!knownMaterials.contains(entry.id)) {
            invalidStockItems << entry.id.toString();
        }
    }

    if (!invalidStockItems.isEmpty()) {
        EventLogger::instance().zEvent("‚ùå a k√©szlet adatai hib√°s elemeket tartalmaznak.");
        status.addWarning(
            QString("‚ö†Ô∏è %1 k√©szletelem nem l√©tez≈ë anyagra hivatkozik.\nEllen≈ërizd a stock.csv f√°jlt.\n√ârintett azonos√≠t√≥k:\n%2")
                .arg(invalidStockItems.size())
                .arg(invalidStockItems.join(", "))
            );
    }

    EventLogger::instance().zEvent(StatusHelper::getMessage(status.isSuccess(),"k√©szlet init"));
    return status;
}


StartupStatus StartupManager::initMaterialGroupRegistry() {
    bool loaded = MaterialGroupRepository::loadFromCsv(MaterialGroupRegistry::instance());
    if (!loaded){
        EventLogger::instance().zEvent("‚ùå Nem siker√ºlt bet√∂lteni az anyagcsoportokat");

        return StartupStatus::failure("‚ùå Nem siker√ºlt bet√∂lteni az anyagcsoportokat a groups.csv f√°jlb√≥l.");
    }

    int count = MaterialGroupRegistry::instance().readAll().size();
    if (count == 0){
        EventLogger::instance().zEvent("‚ùå nincs adat az anyagcsoportokban");

        return StartupStatus::failure("‚ö†Ô∏è Nem tal√°lhat√≥ egyetlen anyagcsoport sem. Lehet, hogy √ºres vagy hib√°s a f√°jl.");
    }

    EventLogger::instance().zEvent(StatusHelper::getMessage(true,"anyagcsoport init"));
    return StartupStatus::success();
}

bool StartupManager::hasMinimumMaterials(int minCount) {
    return MaterialRegistry::instance().readAll().size() >= minCount;
}

StartupStatus StartupManager::initReusableStockRegistry() {
    bool loaded = LeftoverStockRepository::loadFromCSV(LeftoverStockRegistry::instance());
    if (!loaded){
        EventLogger::instance().zEvent("‚ùå Nem siker√ºlt bet√∂lteni a marad√©k k√©szletet");
        return StartupStatus::failure("‚ùå Nem siker√ºlt bet√∂lteni a marad√©k k√©szletet a leftovers.csv f√°jlb√≥l.");
    }


    const auto& all = LeftoverStockRegistry::instance().readAll();

    if (all.isEmpty()){
        EventLogger::instance().zEvent("‚ùå nincs adat a marad√©k k√©szletben");

        return StartupStatus::failure("‚ö†Ô∏è A marad√©k k√©szlet √ºres. Legal√°bb 1 t√©tel sz√ºks√©ges a m≈±k√∂d√©shez.");
    }

    StartupStatus status = StartupStatus::success();

    // üîé Valid√°ci√≥: minden reusable-stock-entry ismert anyagra hivatkozzon
    QSet<QUuid> knownMaterials;
    for (const auto& mat : MaterialRegistry::instance().readAll())
        knownMaterials.insert(mat.id);

    QStringList invalidReusableStockItems;

    for (const auto& entry : all) {
        if (!knownMaterials.contains(entry.materialId)) {
            invalidReusableStockItems << entry.barcode;
        }
    }

    if (!invalidReusableStockItems.isEmpty()) {
        EventLogger::instance().zEvent("‚ùå a marad√©k k√©szlet adatai hib√°s elemeket tartalmaznak.");

        status.addWarning(
            QString("‚ö†Ô∏è %1 marad√©k k√©szletelem nem l√©tez≈ë anyagra hivatkozik.Ellen≈ërizd a leftovers.csv f√°jlt.√ârintett vonalk√≥dok:%2")
                .arg(invalidReusableStockItems.size())
                .arg(invalidReusableStockItems.join(", "))
            );
    }

    EventLogger::instance().zEvent(StatusHelper::getMessage(status.isSuccess(),"marad√©k k√©szlet init"));
    return status;
}

StartupStatus StartupManager::initCuttingRequestRegistry() {
    auto result = CuttingRequestRepository::tryLoadFromSettings(CuttingPlanRequestRegistry::instance());
    //if (!loaded)
    //    return StartupStatus::failure("‚ùå Nem siker√ºlt bet√∂lteni a v√°g√°si ig√©nyeket a be√°ll√≠tott v√°g√°si terv f√°jlb√≥l.");

    switch (result) {
    case CuttingPlanLoadResult::NoFileConfigured:
        zInfo("‚ÑπÔ∏è Nincs v√°g√°si terv konfigur√°lva ‚Äî ez nem hiba.");
        return StartupStatus::success();

    case CuttingPlanLoadResult::FileMissing:
        EventLogger::instance().zEvent("‚ùå v√°g√°si terv f√°jl nem tal√°lhat√≥");
        return StartupStatus::failure("‚ùå A be√°ll√≠tott v√°g√°si terv f√°jl nem tal√°lhat√≥.");

    case CuttingPlanLoadResult::LoadError:
        EventLogger::instance().zEvent("‚ùå v√°g√°si terv f√°jl nem olvashat√≥");
        return StartupStatus::failure("‚ùå Nem siker√ºlt bet√∂lteni a v√°g√°si ig√©nyeket ‚Äî f√°jl hib√°s vagy olvashatatlan.");

    case CuttingPlanLoadResult::Success:
        break;
    }

    const auto& all = CuttingPlanRequestRegistry::instance().readAll();

    // üí° Check: file might be valid but intentionally empty (just header)
    if (all.isEmpty() && CuttingRequestRepository::wasLastFileEffectivelyEmpty()) {        
        zInfo("‚ÑπÔ∏è Nincsenek v√°g√°si ig√©nyek ‚Äî √∫j terv ind√≠t√°sa vagy adat m√©g nem √©rkezett");
        return StartupStatus::success();
    }

    if (all.isEmpty()){
        EventLogger::instance().zEvent("‚ùå nincs adat az v√°g√°si ig√©nyekben");

        return StartupStatus::failure("‚ö†Ô∏è A v√°g√°si ig√©ny lista √ºres. Legal√°bb 1 t√©tel sz√ºks√©ges.");
    }

    StartupStatus status = StartupStatus::success();

    // üîé Valid√°ci√≥: minden request ismert anyagra hivatkozzon
    QSet<QUuid> knownMaterials;
    for (const auto& mat : MaterialRegistry::instance().readAll())
        knownMaterials.insert(mat.id);

    QStringList invalidRequests;
    for (const Cutting::Plan::Request &req : all) {
        if (!knownMaterials.contains(req.materialId)) {
            QString desc = req.toString();
            invalidRequests << desc; // vagy req.id.toString() ha azonos√≠t√≥ kell
        }
    }

    if (!invalidRequests.isEmpty()) {
        EventLogger::instance().zEvent("‚ö†Ô∏è v√°g√°si terv adatai hib√°s elemeket tartalmaznak.");
        status.addWarning(            
            QString("‚ö†Ô∏è %1 v√°g√°si ig√©ny nem l√©tez≈ë anyagra hivatkozik.\nEllen≈ërizd a cuttingrequests.csv f√°jlt.\n√ârintett azonos√≠t√≥k:\n%2")
                .arg(invalidRequests.size())
                .arg(invalidRequests.join(", "))
            );
    }

    EventLogger::instance().zEvent(StatusHelper::getMessage(status.isSuccess(),"v√°g√°si terv init"));
    return status;
}

StartupStatus StartupManager::initCuttingMachineRegistry() {
    bool loaded = CuttingMachineRepository::loadFromCsv(CuttingMachineRegistry::instance());
    if (!loaded){
        EventLogger::instance().zEvent("‚ùå Nem siker√ºlt bet√∂lteni a v√°g√≥g√©peket");
        return StartupStatus::failure("‚ùå Nem siker√ºlt bet√∂lteni a v√°g√≥g√©peket a cuttingmachines.csv f√°jlb√≥l.");
    }

    const auto& machines = CuttingMachineRegistry::instance().readAll();
    if (machines.isEmpty()){
        EventLogger::instance().zEvent("‚ùå nincs adat a v√°g≈ëg√©pekben");

        return StartupStatus::failure("‚ö†Ô∏è A v√°g√≥g√©p t√∂rzs √ºres. Legal√°bb 1 g√©p sz√ºks√©ges a m≈±k√∂d√©shez.");
    }

    StartupStatus status = StartupStatus::success();

    // üîé Valid√°ci√≥: minden g√©phez legyen legal√°bb 1 kompatibilis anyagt√≠pus
    QStringList machinesWithoutMaterials;
    for (const auto& machine : machines) {
        if (machine.compatibleMaterials.isEmpty())
            machinesWithoutMaterials << machine.name;
    }

    if (!machinesWithoutMaterials.isEmpty()) {
        EventLogger::instance().zEvent("‚ùå a v√°g√≥g√©pek adatai hib√°s elemeket tartalmaznak.");

        status.addWarning(
            QString("‚ö†Ô∏è %1 v√°g√≥g√©phez nincs megadva kompatibilis anyagt√≠pus.\n√ârintett g√©pek: %2")
                .arg(machinesWithoutMaterials.size())
                .arg(machinesWithoutMaterials.join(", ")));
    }

    EventLogger::instance().zEvent(StatusHelper::getMessage(status.isSuccess(),"v√°g√≥g√©pek init"));
    return status;
}

StartupStatus StartupManager::initRalColors()
{
    auto fnh = FileNameHelper::instance();

    QList<RalSource> ralSources = {
        { RalSystem::Classic, fnh.getRalClassicCsvFile() },
        { RalSystem::Design,  fnh.getRalDesignCsvFile() },
        { RalSystem::Plastic1,  fnh.getRalPlastic1CsvFile() },
        { RalSystem::Plastic2,  fnh.getRalPlastic2CsvFile() }
    };

    bool ok = NamedColor::initRalColors(ralSources);

    StartupStatus status = StartupStatus::success();

    if (!ok) {
        EventLogger::instance().zEvent("‚ùå a RAL sz√≠nek adatai hib√°s elemeket tartalmaznak.");

        status.addWarning(
            QString("‚ö†Ô∏è Nem siker√ºlt a RAL sz√≠neket initelni.")
            );
    }

    EventLogger::instance().zEvent(StatusHelper::getMessage(status.isSuccess(),"RAL szinek init"));
    return status;
}

