#include "startupmanager.h"
#include "../../model/repositories/materialrepository.h"
#include "../../model/registries/materialregistry.h"
#include "../../model/materialmaster.h"
#include "common/logger.h"
#include "model/registries/cuttingplanrequestregistry.h"
//#include "model/stockentry.h"

#include <model/repositories/materialgrouprepository.h>
#include <model/registries//stockregistry.h>
#include <model/repositories/cuttingrequestrepository.h>
#include <model/repositories/leftoverstockrepository.h>
#include <model/repositories/stockrepository.h>
#include <model/repositories/storagerepository.h>

#include <QSet>
//#include "ProfileCategory.h"

StartupStatus StartupManager::runStartupSequence() {      
    StartupStatus materialStatus = initMaterialRegistry();
    if (!materialStatus.ok)
        return materialStatus;

    StartupStatus storageStatus = initStorageRegistry();
    if (!storageStatus.ok)
        return storageStatus;

    StartupStatus groupStatus = initMaterialGroupRegistry(); // ‚úÖ √∫j n√©v!
    if (!groupStatus.ok)
        return groupStatus;

    StartupStatus stockStatus = initStockRegistry(); // ‚úÖ √∫j n√©v!
    if (!stockStatus.ok)
        return stockStatus;

    StartupStatus reusableStockStatus = initReusableStockRegistry();
    if (!reusableStockStatus.ok)
        return reusableStockStatus;

    //CuttingRequestRepository::tryLoadFromSettings(CuttingRequestRegistry::instance());
    StartupStatus cuttingReqStatus = initCuttingRequestRegistry();
    if (!cuttingReqStatus.ok)
        return cuttingReqStatus;

    StartupStatus finalStatus = StartupStatus::success();
    finalStatus.warnings += materialStatus.warnings;
    finalStatus.warnings += groupStatus.warnings;
    finalStatus.warnings += stockStatus.warnings;    
    finalStatus.warnings += reusableStockStatus.warnings;

    finalStatus.warnings += cuttingReqStatus.warnings;

    return finalStatus;
}

StartupStatus StartupManager::initMaterialRegistry() {
    bool loaded = MaterialRepository::loadFromCSV(MaterialRegistry::instance());
    if (!loaded)
        return StartupStatus::failure("‚ùå Nem siker√ºlt bet√∂lteni az anyagt√∂rzset a CSV f√°jlb√≥l.");

    const auto& all = MaterialRegistry::instance().readAll();

    if (!hasMinimumMaterials(2))
        return StartupStatus::failure(
            QString("‚ö†Ô∏è T√∫l kev√©s anyag tal√°lhat√≥ a t√∂rzsben (%1 db). Legal√°bb 2 sz√ºks√©ges.")
                .arg(all.size()));

    StartupStatus status = StartupStatus::success();

    // üîé Valid√°ci√≥: csoportban szerepl≈ë ismeretlen anyagok
    QSet<QUuid> knownMaterials;
    for (const auto& mat : all)
        knownMaterials.insert(mat.id);

    const auto& groupList = MaterialGroupRegistry::instance().readAll();
    QStringList invalidGroups;

    for (const auto& group : groupList) {
        for (const auto& mid : group.materialIds) {
            if (!knownMaterials.contains(mid)) {
                invalidGroups << group.name;
                break;
            }
        }
    }

    if (!invalidGroups.isEmpty()) {
        status.addWarning(
            QString("‚ö†Ô∏è %1 csoport olyan anyagot tartalmaz, ami nincs a t√∂rzsben.\nEllen≈ërizd a groups.csv f√°jlt: %2")
                .arg(invalidGroups.size())
                .arg(invalidGroups.join(", "))
            );
    }

    return status;
}

StartupStatus StartupManager::initStorageRegistry() {
    bool loaded = StorageRepository::loadFromCSV(StorageRegistry::instance());
    if (!loaded)
        return StartupStatus::failure("‚ùå Nem siker√ºlt bet√∂lteni a storage.csv f√°jlb√≥l a rakt√°ri t√∂rzset.");

    const auto& entries = StorageRegistry::instance().readAll();
    if (entries.isEmpty())
        return StartupStatus::failure("‚ö†Ô∏è A storage t√∂rzs √ºres. Legal√°bb 1 rakt√°ri bejegyz√©s sz√ºks√©ges.");

    StartupStatus status = StartupStatus::success();

    // üîé Valid√°ci√≥: parentId mez≈ëk csak l√©tez≈ë bejegyz√©sre mutassanak
    QSet<QUuid> knownIds;
    for (const auto& entry : entries)
        knownIds.insert(entry.id);

    QStringList invalidParentRefs;
    for (const auto& entry : entries) {
        if (!entry.parentId.isNull() && !knownIds.contains(entry.parentId)) {
            invalidParentRefs << entry.name;
        }
    }

    if (!invalidParentRefs.isEmpty()) {
        status.addWarning(
            QString("‚ö†Ô∏è %1 storage elem nem l√©tez≈ë sz√ºl≈ëre hivatkozik.\n√ârintett bejegyz√©sek: %2")
                .arg(invalidParentRefs.size())
                .arg(invalidParentRefs.join(", "))
            );
    }

    return status;
}


StartupStatus StartupManager::initStockRegistry() {
    bool loaded = StockRepository::loadFromCSV(StockRegistry::instance());
    if (!loaded)
        return StartupStatus::failure("‚ùå Nem siker√ºlt bet√∂lteni a k√©szletet a CSV f√°jlb√≥l).");

    const auto& all = MaterialRegistry::instance().readAll();

    if (all.isEmpty())
        return StartupStatus::failure("‚ö†Ô∏è A k√©szlet √ºres. Legal√°bb 1 t√©tel sz√ºks√©ges a m≈±k√∂d√©shez.");

    StartupStatus status = StartupStatus::success();

    // üîé Valid√°ci√≥: minden stock-entry ismert anyagra hivatkozzon
    QSet<QUuid> knownMaterials;
    for (const auto& mat : all)
        knownMaterials.insert(mat.id);

    QStringList invalidStockItems;

    for (const auto& entry : all) {
        if (!knownMaterials.contains(entry.id)) {
            invalidStockItems << entry.id.toString();
        }
    }

    if (!invalidStockItems.isEmpty()) {
        status.addWarning(
            QString("‚ö†Ô∏è %1 k√©szletelem nem l√©tez≈ë anyagra hivatkozik.\nEllen≈ërizd a stock.csv f√°jlt.\n√ârintett azonos√≠t√≥k:\n%2")
                .arg(invalidStockItems.size())
                .arg(invalidStockItems.join(", "))
            );
    }

    return status;
}


StartupStatus StartupManager::initMaterialGroupRegistry() {
    bool loaded = MaterialGroupRepository::loadFromCsv(MaterialGroupRegistry::instance());
    if (!loaded)
        return StartupStatus::failure("‚ùå Nem siker√ºlt bet√∂lteni az anyagcsoportokat a groups.csv f√°jlb√≥l.");

    int count = MaterialGroupRegistry::instance().readAll().size();
    if (count == 0)
        return StartupStatus::failure("‚ö†Ô∏è Nem tal√°lhat√≥ egyetlen anyagcsoport sem. Lehet, hogy √ºres vagy hib√°s a f√°jl.");

    return StartupStatus::success();
}

bool StartupManager::hasMinimumMaterials(int minCount) {
    return MaterialRegistry::instance().readAll().size() >= minCount;
}

StartupStatus StartupManager::initReusableStockRegistry() {
    bool loaded = LeftoverStockRepository::loadFromCSV(LeftoverStockRegistry::instance());
    if (!loaded)
        return StartupStatus::failure("‚ùå Nem siker√ºlt bet√∂lteni a marad√©k k√©szletet a leftovers.csv f√°jlb√≥l.");

    const auto& all = LeftoverStockRegistry::instance().readAll();

    if (all.isEmpty())
        return StartupStatus::failure("‚ö†Ô∏è A marad√©k k√©szlet √ºres. Legal√°bb 1 t√©tel sz√ºks√©ges a m≈±k√∂d√©shez.");

    StartupStatus status = StartupStatus::success();

    // üîé Valid√°ci√≥: minden reusable-stock-entry ismert anyagra hivatkozzon
    QSet<QUuid> knownMaterials;
    for (const auto& mat : MaterialRegistry::instance().readAll())
        knownMaterials.insert(mat.id);

    QStringList invalidReusableStockItems;

    for (const auto& entry : all) {
        if (!knownMaterials.contains(entry.materialId)) {
            invalidReusableStockItems << entry.barcode;
        }
    }

    if (!invalidReusableStockItems.isEmpty()) {
        status.addWarning(
            QString("‚ö†Ô∏è %1 marad√©k k√©szletelem nem l√©tez≈ë anyagra hivatkozik.Ellen≈ërizd a leftovers.csv f√°jlt.√ârintett vonalk√≥dok:%2")
                .arg(invalidReusableStockItems.size())
                .arg(invalidReusableStockItems.join(", "))
            );
    }

    return status;
}

StartupStatus StartupManager::initCuttingRequestRegistry() {
    bool loaded = CuttingRequestRepository::tryLoadFromSettings(CuttingPlanRequestRegistry::instance());
    if (!loaded)
        return StartupStatus::failure("‚ùå Nem siker√ºlt bet√∂lteni a v√°g√°si ig√©nyeket a be√°ll√≠tott v√°g√°si terv f√°jlb√≥l.");

    const auto& all = CuttingPlanRequestRegistry::instance().readAll();

    // üí° Check: file might be valid but intentionally empty (just header)
    if (all.isEmpty() && CuttingRequestRepository::wasLastFileEffectivelyEmpty()) {
        zInfo("‚ÑπÔ∏è Nincsenek v√°g√°si ig√©nyek ‚Äî √∫j terv ind√≠t√°sa vagy adat m√©g nem √©rkezett");
        return StartupStatus::success();
    }

    if (all.isEmpty())
        return StartupStatus::failure("‚ö†Ô∏è A v√°g√°si ig√©ny lista √ºres. Legal√°bb 1 t√©tel sz√ºks√©ges.");

    StartupStatus status = StartupStatus::success();

    // üîé Valid√°ci√≥: minden request ismert anyagra hivatkozzon
    QSet<QUuid> knownMaterials;
    for (const auto& mat : MaterialRegistry::instance().readAll())
        knownMaterials.insert(mat.id);

    QStringList invalidRequests;
    for (const CuttingPlanRequest &req : all) {
        if (!knownMaterials.contains(req.materialId)) {
            QString desc = req.toString();
            invalidRequests << desc; // vagy req.id.toString() ha azonos√≠t√≥ kell
        }
    }

    if (!invalidRequests.isEmpty()) {
        status.addWarning(
            QString("‚ö†Ô∏è %1 v√°g√°si ig√©ny nem l√©tez≈ë anyagra hivatkozik.\nEllen≈ërizd a cuttingrequests.csv f√°jlt.\n√ârintett azonos√≠t√≥k:\n%2")
                .arg(invalidRequests.size())
                .arg(invalidRequests.join(", "))
            );
    }

    return status;
}


