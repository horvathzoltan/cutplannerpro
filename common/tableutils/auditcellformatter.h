#pragma once

#include "common/logger.h"
#include "model/storageaudit/storageauditrow.h"
#include <QString>

namespace AuditCellFormatter {

/**
 * @brief Elv√°rt mennyis√©g sz√∂veges form√°z√°sa audit sorhoz.
 *
 * Logika:
 * - Hull√≥ audit sorokn√°l nincs elv√°rt mennyis√©g ‚Üí visszat√©r "‚Äì".
 * - Ha a sor csoport tagja, √©s van elv√°rt mennyis√©g ‚Üí csoport szint≈± √©rt√©k jelenik meg.
 * - Egyedi sor eset√©n a lok√°lis pickingQuantity jelenik meg.
 * - Ha nincs elv√°rt mennyis√©g ‚Üí visszat√©r "‚Äì".
 * - Ha nincs optimaliz√°ci√≥ ‚Üí visszat√©r "‚Äì" (vizu√°lisan semleges).
 * - Ha van csoportazonos√≠t√≥ (groupLabel), megjelenik az √©rt√©k mellett.
 */
inline QString formatExpectedQuantity(const StorageAuditRow& row, const QString& groupLabel = "") {
    zInfo(L("üì¶ formatExpectedQuantity: rowId=%1, materialId=%2, sourceType=%3, isInOptimization=%4, pickingQuantity=%5, context=%6, groupSize=%7, groupLabel=%8")
              .arg(row.rowId.toString())
              .arg(row.materialId.toString())
              .arg(static_cast<int>(row.sourceType))
              .arg(row.isInOptimization)
              .arg(row.pickingQuantity)
              .arg(row.context ? "yes" : "no")
              .arg(row.context ? row.context->group.rowIds.size() : -1)
              .arg(groupLabel));



    // üß© Hull√≥ audit sor eset√©n: csak akkor jelen√≠ts√ºnk meg elv√°r√°st, ha t√©nyleg van
    if (row.sourceType == AuditSourceType::Leftover) {
        if (row.isInOptimization && row.pickingQuantity > 0)
            return QString("%1 db").arg(row.pickingQuantity); // pl. "1 db"
        return "‚Äì"; // nincs elv√°r√°s ‚Üí vizu√°lisan semleges
    }

    // üß© Csoportos√≠tott stock sor eset√©n: aggreg√°lt elv√°rt mennyis√©g
    if (row.context){// && row.context->group.rowIds.size() > 1) {
        int expected = row.context->group.totalExpected;
        if (!row.isInOptimization)
            return "‚Äì"; // nincs optimaliz√°ci√≥ ‚Üí nincs elv√°rt

        return groupLabel.isEmpty()
                   ? QString("%1 db (anyagcsoport)").arg(expected)
                   : QString("%1 db (anyagcsoport %2)").arg(expected).arg(groupLabel);
    }

    // üîπ Egyedi stock sor eset√©n: lok√°lis elv√°rt mennyis√©g
    return row.isInOptimization
               ? QString("%1 db").arg(row.pickingQuantity)
               : "‚Äì";
}


/**
 * @brief Hi√°nyz√≥ mennyis√©g sz√∂veges form√°z√°sa audit sorhoz.
 *
 * Logika:
 * - Hull√≥ audit sor eset√©n: ha van elv√°rt mennyis√©g, akkor lok√°lis hi√°nyt mutat.
 * - Csoportos√≠tott stock sor eset√©n: aggreg√°lt hi√°nyt mutat.
 * - Egyedi stock sor eset√©n: lok√°lis hi√°nyt mutat.
 * - Ha nincs hi√°ny, akkor "0 db" jelenik meg ‚Üí vizu√°lisan is meger≈ës√≠ti a teljes√ºl√©st.
 * - Ha nincs optimaliz√°ci√≥ ‚Üí visszat√©r "‚Äì".
 * - A hi√°ny sosem lehet negat√≠v ‚Üí max(0, expected - actual).
 */
inline QString formatMissingQuantity(const StorageAuditRow& row) {
    // üß© Hull√≥ audit sor: ha van elv√°r√°s, akkor sz√°molunk hi√°nyt
    if (row.sourceType == AuditSourceType::Leftover) {
        if (row.isInOptimization && row.pickingQuantity > 0) {
            int missing = std::max(0, row.missingQuantity());
            return QString("%1 db").arg(missing); // lehet 0 is
        }
        return "‚Äì"; // nincs elv√°r√°s ‚Üí semleges megjelen√≠t√©s
    }

    // üß© Csoportos√≠tott stock sor eset√©n: aggreg√°lt hi√°ny
    if (row.context && row.context->group.rowIds.size() > 1) {
        if (!row.isInOptimization)
            return "‚Äì"; // nincs optimaliz√°ci√≥ ‚Üí nincs hi√°ny

        int missing = std::max(0, row.context->group.totalExpected - row.context->group.totalActual);
        return QString("%1 db (anyagcsoport)").arg(missing); // lehet 0 is
    }

    // üîπ Egyedi stock sor eset√©n: lok√°lis hi√°ny
    return row.isInOptimization
               ? QString("%1 db").arg(std::max(0, row.missingQuantity()))
               : "‚Äì";
}

} // namespace AuditCellFormatter
