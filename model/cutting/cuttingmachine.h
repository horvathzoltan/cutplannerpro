#pragma once

#include <QVector>
#include "../material/materialtype.h"
#include "../identifiableentity.h"

// üîß G√©pdefin√≠ci√≥ a v√°g√°shoz: kerf, anyagkompatibilit√°s, hely, megjegyz√©s
struct CuttingMachine : public IdentifiableEntity {
    QString name;
    QString location;

    double kerf_mm = 0.0;                   // ‚úÇÔ∏è V√°g√°svesztes√©g mm-ben (kerf)
    double stellerMaxLength_mm = 0.0;       // üìè Max hossz stellerrel
    double stellerCompensation_mm = 0.0;    // ‚öñÔ∏è Kompenz√°ci√≥ √©rt√©k mm-ben


    QVector<MaterialType> compatibleMaterials; // ‚öôÔ∏è Alkalmas anyagt√≠pusok (pl. Aluminium, Steel)

    QString comment;                        // üóíÔ∏è Opcion√°lis megjegyz√©s / karbantart√°si inform√°ci√≥

    QUuid rootStorageId; // üóÇÔ∏è A g√©phez tartoz√≥ t√°rol√≥fa gy√∂k√©r StorageEntry ID-je

    CuttingMachine();
};

struct CuttingMachineMaterialRow {
    QString machineName;
    QString materialTypeStr;
};

/*
cuttingmachines.csv

name,location,kerf_mm,stellerMaxLength_mm,stellerCompensation_mm,comment
K√∂rf≈±r√©sz VAS,"Napellenz≈ës m≈±hely",3.2,0.0,0.0,"K√©zi m√©r√©s, jel√∂l√©s"
K√∂rf≈±r√©sz ALU,"Alu v√°g√≥",2.1,3200,2.4,"Stelleres v√°g√°s aluhoz √©s m≈±anyaghoz"


cuttingmachine_materials.csv

machineName,materialTypeStr
K√∂rf≈±r√©sz VAS,Steel
K√∂rf≈±r√©sz ALU,Aluminium
K√∂rf≈±r√©sz ALU,Plastic
*/
