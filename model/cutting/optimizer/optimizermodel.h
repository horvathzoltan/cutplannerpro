#pragma once

#include <QObject>
#include <QVector>
#include <QMap>
#include <QSet>

#include <model/cutting/piece/piecewithmaterial.h>
#include "../plan/cutplan.h"
#include "../result/resultmodel.h"
#include "../plan/request.h"
#include "../../leftoverstockentry.h"
//#include "../../stockentry.h"
#include "model/cutting/cuttingmachine.h"
#include "model/inventorysnapshot.h"

namespace Cutting {
namespace Optimizer {

/**
 * @brief Be√°ll√≠tja, hogy az optimaliz√°l√≥ hogyan v√°lassza ki a k√∂vetkez≈ë feldolgozand√≥ anyagcsoportot.
 *
 * K√©tf√©le "okoss√°g" (heurisztika) k√∂z√ºl lehet v√°lasztani:
 *
 * - ByCount (üìä darabsz√°m alapj√°n):
 *   Mindig azt az anyagcsoportot v√°lasztja, ahol a legt√∂bb darab v√°rakozik.
 *   P√©lda: ha van egy csoportban 12 r√∂vid darab, a m√°sikban csak 2 hossz√∫,
 *   akkor a 12 darabos csoport ker√ºl el≈ëre, mert ott t√∂bb a feldolgoznival√≥.
 *
 * - ByTotalLength (üìè √∂sszhossz alapj√°n):
 *   Mindig azt az anyagcsoportot v√°lasztja, ahol a darabok teljes hossza a legnagyobb.
 *   P√©lda: ha van egy csoportban 10 db 100 mm-es darab (√∂sszesen 1000 mm),
 *   √©s egy m√°sikban 2 db 800 mm-es darab (√∂sszesen 1600 mm),
 *   akkor a 2 darabos csoport ker√ºl el≈ëre, mert ott nagyobb a teljes hossz.
 *
 * R√∂viden:
 * - ByCount = "ahol t√∂bb a darab"
 * - ByTotalLength = "ahol t√∂bb az anyag"
 */
enum class TargetHeuristic {
    ByCount,       // üìä Legt√∂bb darab
    ByTotalLength  // üìè Legnagyobb √∂sszhossz
};

class OptimizerModel : public QObject {
    Q_OBJECT

public:
    explicit OptimizerModel(QObject *parent = nullptr);

    /**
 * @brief A teljes v√°g√°si tervek list√°j√°t adja vissza (referenciak√©nt).
 *
 * Ez tartalmazza az √∂sszes elk√©sz√ºlt CutPlan-t, vagyis minden egyes r√∫d teljes v√°g√°si terv√©t.
 * Itt az l√°tszik, hogy melyik r√∫d hogyan lett feldarabolva, milyen darabok ker√ºltek bel≈ële kiv√°g√°sra,
 * mennyi volt a kerf (f≈±r√©szv√°g√°s miatti vesztes√©g), √©s mennyi hullad√©k maradt.
 *
 * R√∂viden: ez a "nagy k√©p", a teljes v√°g√°si folyamat terve rudank√©nt.
 */
    QVector<Cutting::Plan::CutPlan> &getResult_PlansRef();

/**
 * @brief A v√°g√°sok ut√°n keletkezett hull√≥ darabok list√°j√°t adja vissza.
 *
 * Ez NEM a teljes terv, hanem csak a marad√©kok (leftovers) gy≈±jtem√©nye.
 * Minden elem egy ResultModel, ami tartalmazza:
 * - melyik tervb≈ël sz√°rmazik a hull√≥,
 * - mekkora a hossza,
 * - milyen anyagb√≥l van,
 * - √∫jrafelhaszn√°lhat√≥-e, vagy v√©gs≈ë hullad√©k.
 *
 * R√∂viden: ez a "mell√©kterm√©k lista", vagyis mi maradt a v√°g√°sok ut√°n.
 */
    QVector<Cutting::Result::ResultModel> getResults_Leftovers() const;


    /**
 * @brief Az optimaliz√°l√≥ f≈ë folyamata: elk√©sz√≠ti a v√°g√°si terveket √©s a hull√≥ list√°t.
 *
 * Mit csin√°l ez a f√ºggv√©ny?
 * 1. √ñsszegy≈±jti a v√°gand√≥ darabokat, √©s anyag szerint csoportos√≠tja ≈ëket.
 * 2. Am√≠g van feldolgozatlan darab:
 *    - kiv√°lasztja, melyik anyagcsoporttal foglalkozzon (a be√°ll√≠tott heurisztika alapj√°n:
 *      ByCount = ahol t√∂bb a darab, ByTotalLength = ahol t√∂bb az anyag),
 *    - megn√©zi, van-e hozz√° megfelel≈ë g√©p,
 *    - el≈ësz√∂r pr√≥b√°l hull√≥b√≥l (reusable) darabolni,
 *    - ha nincs megfelel≈ë hull√≥, akkor a k√©szletb≈ël (stock) v√°laszt rudat,
 *    - ha egyik sem j√≥, a darabot eldobja.
 * 3. Ha tal√°lt megfelel≈ë rudat:
 *    - kiv√°gja bel≈ële a legjobb kombin√°ci√≥t,
 *    - elt√°vol√≠tja a felhaszn√°lt darabokat a list√°b√≥l,
 *    - l√©trehoz egy CutPlan-t (v√°g√°si tervet) a teljes r√∫dr√≥l,
 *    - l√©trehoz egy ResultModel-t a marad√©kr√≥l (hull√≥).
 * 4. Minden l√©p√©sr≈ël audit logot √≠r (g√©padatok, kerf, hullad√©k).
 * 5. A v√©g√©n kitakar√≠tja a reusable k√©szletb≈ël a m√°r felhaszn√°lt hull√≥kat.
 *
 * R√∂viden: ez a "nagy var√°zsl√≥", ami a bemeneti ig√©nyekb≈ël (darabok + k√©szlet)
 * elk√©sz√≠ti a teljes v√°g√°si terveket √©s a hull√≥ list√°t.
 */
    void optimize(TargetHeuristic heuristic);
    //void optimize_old(TargetHeuristic heuristic);

    void setCuttingRequests(const QVector<Cutting::Plan::Request>& list);

    void setInventorySnapshot(const InventorySnapshot &snapshot){
        _inventorySnapshot = snapshot;
    }

private:

/**
 * @brief Egy kiv√°lasztott r√∫d adatait tartalmazza, amib≈ël v√°gni fogunk.
 *
 * Ez a seg√©dstrukt√∫ra arra szolg√°l, hogy egy helyen legyen minden fontos adat
 * a k√∂vetkez≈ë feldolgozand√≥ r√∫dr√≥l. √çgy nem kell k√ºl√∂n v√°ltoz√≥kb√≥l √∂sszeszedegetni.
 *
 * Mit tartalmaz?
 * - materialId: az anyag azonos√≠t√≥ja (milyen anyagb√≥l van a r√∫d)
 * - length: a r√∫d teljes hossza millim√©terben
 * - isReusable: igaz/hamis jelz≈ë, hogy ez egy √∫jrafelhaszn√°lt hull√≥-e (true),
 *   vagy egy √∫j r√∫d a k√©szletb≈ël (false)
 * - barcode: a r√∫d vonalk√≥dja vagy egyedi azonos√≠t√≥ja
 *
 * R√∂viden: ez a "kiv√°lasztott r√∫d csomag", amit az optimaliz√°l√≥ √©ppen feldarabol.
 */
    struct SelectedRod {
        QUuid materialId;
        int length = 0;
        bool isReusable = false;
        QString barcode;   // k√ºls≈ë c√≠mke (RST-xxxx)
        QString rodId;     // bels≈ë identit√°s (ROD-xxxx)
        std::optional<QUuid> entryId; // csak ha reusable
    };

    // A felhaszn√°l√≥t√≥l √©rkez≈ë v√°g√°si ig√©nyek (darabok list√°ja).
    // Ezek a bemeneti adatok, az optimaliz√°ci√≥ alatt nem m√≥dosulnak.
    QVector<Cutting::Plan::Request> _requests;

    // A k√©szlet pillanatk√©pe (snapshot), amely tartalmazza a teljes rudakat √©s a marad√©kokat.
    // Ez egy homokoz√≥ m√°solat, amelyet a registrykb≈ël t√∂lt√ºnk be.
    // Az optimaliz√°ci√≥ ezen dolgozik, a val√≥di registryket nem √©rinti.
    InventorySnapshot _inventorySnapshot;

    // Az optimaliz√°ci√≥ eredm√©nye: minden egyes r√∫dhoz l√©trej√∂tt v√°g√°si terv.
    QVector<Cutting::Plan::CutPlan> _result_plans;

    // Az optimaliz√°ci√≥ sor√°n el≈ërejelzett marad√©kok (planned leftovers).
    // Ezek a "mi lenne, ha" kimenetek, csak finalize ut√°n ker√ºlhetnek vissza a registrybe.
    QVector<Cutting::Result::ResultModel> _planned_leftovers;

    // üî¢ Glob√°lis sz√°ml√°l√≥ minden optimize fut√°shoz.
    // Minden √∫j optimaliz√°ci√≥s fut√°s (optimize()) kap egy egyedi azonos√≠t√≥t,
    // amit a CutPlan-ekhez √©s ResultModel-ekhez rendel√ºnk, hogy auditban
    // √©s logban visszak√∂vethet≈ë legyen, melyik fut√°sb√≥l sz√°rmaznak.
    int nextOptimizationId = 1;
    int planCounter = 0; // üî¢ Glob√°lis batch sz√°ml√°l√≥
    //QSet<QString> _usedLeftoverBarcodes; // ‚ôªÔ∏è m√°r felhaszn√°lt hull√≥k nyilv√°ntart√°sa

    QMap<QUuid, QString> leftoverRodMap;   // entryId ‚Üí rodId
    QSet<QUuid> _usedLeftoverEntryIds; // ‚ôªÔ∏è m√°r felhaszn√°lt leftover entryId-k



private:
    QVector<LeftoverStockEntry> _localLeftovers;  // csak az aktu√°lis optimize fut√°s idej√©re


    // QVector<LeftoverStockEntry> allReusableLeftovers() const {
    //     QVector<LeftoverStockEntry> all = _inventorySnapshot.reusableInventory;
    //     all += _localLeftovers;
    //     return all;
    // }

    //     void consumeLeftover(const LeftoverStockEntry& stock);

    /**
 * @brief Megkeresi a legjobb darabkombin√°ci√≥t egy adott r√∫dhoz.
 *
 * Mit csin√°l?
 * - Kap egy list√°t a rendelkez√©sre √°ll√≥ darabokr√≥l (ugyanabb√≥l az anyagcsoportb√≥l),
 * - Kap egy hosszkorl√°tot (a r√∫d teljes hossza),
 * - Kap egy kerf √©rt√©ket (a v√°g√°sok miatti vesztes√©g).
 *
 * Ezut√°n v√©gigpr√≥b√°lja a darabok k√ºl√∂nb√∂z≈ë kombin√°ci√≥it, √©s kiv√°lasztja azt,
 * amelyik a legjobban kihaszn√°lja a rudat:
 * - min√©l t√∂bb darabot siker√ºl kiv√°gni,
 * - min√©l kevesebb hullad√©k marad.
 *
 * R√∂viden: ez a "kombin√°ci√≥-keres≈ë", ami megmondja,
 * hogy mely darabokat √©rdemes egy√ºtt kiv√°gni egy r√∫db√≥l.
 */
    QVector<Cutting::Piece::PieceWithMaterial> findBestFit(
        const QVector<Cutting::Piece::PieceWithMaterial>& available,
        int lengthLimit,
        double kerf_mm) const;

/**
 * @brief Egy √∫jrafelhaszn√°lhat√≥ (hull√≥) r√∫d legjobb tal√°lat√°t √≠rja le.
 *
 * Amikor az optimaliz√°l√≥ megpr√≥b√°l darabokat elhelyezni egy m√°r megl√©v≈ë hull√≥ r√∫dban,
 * akkor a keres√©s eredm√©ny√©t ebben a strukt√∫r√°ban adjuk vissza.
 *
 * Mit tartalmaz?
 * - indexInInventory: a reusableInventory-ban hol tal√°lhat√≥ ez a hull√≥ darab
 * - stock: maga a hull√≥ r√∫d le√≠r√°sa (anyag, hossz, azonos√≠t√≥, stb.)
 * - combo: azok a darabok, amiket ebb≈ël a hull√≥b√≥l siker√ºlt kiv√°gni
 * - totalWaste: mennyi marad√©k (hullad√©k) maradt a v√°g√°s ut√°n
 *
 * R√∂viden: ez a "nyertes aj√°nlat" egy hull√≥ r√∫db√≥l.
 * Ha tal√°lunk ilyet, akkor ebb≈ël v√°gunk, nem vesz√ºnk el≈ë √∫j rudat a k√©szletb≈ël.
 */
    struct ReusableCandidate {
        int indexInView;                  // az √∂sszef√©s√ºlt n√©zet indexe (csak keres√©shez)
        LeftoverStockEntry stock;         // a kiv√°lasztott leftover
        QVector<Cutting::Piece::PieceWithMaterial> combo;
        int waste;

        enum class Source { GlobalSnapshot, LocalPool } source; // ‚¨Ö forr√°s megjel√∂l√©se
    };


    /**
 * @brief Megkeresi, hogy a hull√≥ k√©szletb≈ël (reusableInventory) van-e olyan darab,
 *        amib≈ël √©rdemes √∫jra v√°gni.
 *
 * Mit csin√°l?
 * - V√©gign√©zi az √∂sszes hull√≥ rudat (reusableInventory),
 * - Megn√©zi, hogy az adott anyagcsoport darabjai k√∂z√ºl melyek f√©rnek bele,
 * - Kisz√°molja, mennyi darabot lehet bel≈ële kiv√°gni √©s mennyi hullad√©k marad,
 * - Kiv√°lasztja a legjobb tal√°latot (ahol a legt√∂bb darabot siker√ºl elhelyezni,
 *   √©s a legkevesebb a vesztes√©g).
 *
 * Ha tal√°l ilyet, visszaad egy ReusableCandidate-et, ami tartalmazza:
 * - melyik hull√≥ r√∫d volt az,
 * - milyen darabokat siker√ºlt bel≈ële kiv√°gni,
 * - mennyi hullad√©k maradt.
 *
 * Ha nem tal√°l megfelel≈ë hull√≥t, akkor √ºres (std::nullopt) az eredm√©ny.
 *
 * R√∂viden: ez a "hull√≥-vad√°sz", ami megmondja,
 * hogy √©rdemes-e egy megl√©v≈ë marad√©kb√≥l dolgozni, vagy sem.
 */
    std::optional<ReusableCandidate> findBestReusableFit(
        const QVector<LeftoverStockEntry>& reusableInventory,
        int globalCount,
        const QVector<Cutting::Piece::PieceWithMaterial>& pieces,
        QUuid materialId,
        double kerf_mm
        ) const;
    void cutSinglePieceBatch(const Cutting::Piece::PieceWithMaterial &piece,
                             int &remainingLength, const SelectedRod &rod,
                             const CuttingMachine &machine,
                             int currentOpId,
                             int rodId,
                             double kerf_mm,
                             QVector<Cutting::Piece::PieceWithMaterial> &groupVec);
    void cutComboBatch(const QVector<Cutting::Piece::PieceWithMaterial> &combo,
                       int &remainingLength,
                       const SelectedRod &rod,
                       const CuttingMachine &machine,
                       int currentOpId,
                       int rodId,
                       double kerf_mm,
                       QVector<Cutting::Piece::PieceWithMaterial> &groupVec);
};

} //end namespace Optimizer
} //end namespace Cutting
