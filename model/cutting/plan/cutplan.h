#pragma once  // üëë Modern include guard

#include "status.h"
#include "source.h"
#include "service/cutting/segment/segmentutils.h"
#include "model/cutting/piece/piecewithmaterial.h"
//#include "../piece/pieceinfo.h"
#include "../segment/segmentmodel.h"

#include <QString>
#include <QVector>
#include <QUuid>



namespace Cutting {
namespace Plan {

/**
 * @class CutPlan
 * @brief Egy adott anyagdarab v√°g√°si terve (stock vagy reusable)
 * az anyagfelhaszn√°l√°st √≠rja le, ami ez alapj√°n audit√°lhat√≥
 *
 * F≈ëbb elemek:
 * - piecesWithMaterial: lev√°gott darabok metaadatokkal
 * - segments: vizu√°lis √©s logikai v√°g√°si szakaszok
 * - kerfTotal, waste: anyagvesztes√©g √©s marad√©k
 * - materialId, rodId: azonos√≠t√≥k az anyaghoz
 *
 * Haszn√°lat:
 * - Az OptimizerModel::_result_plans gy≈±jti √∂ssze
 * - Audit√°l√°s, √∫jrahasznos√≠t√°s √©s UI megjelen√≠t√©s c√©lj√°b√≥l
 */

class CutPlan
{
public:
    // üì¶ Mez≈ëk ‚Äì az eredeti struct-nak megfelel≈ëen
    int rodNumber = -1;       // ‚ûï Sorsz√°m / index
    //QVector<int> cuts;      // ‚úÇÔ∏è Darabol√°sok mm-ben
    int kerfTotal = 0;        // üîß V√°g√°sok sor√°n vesztett anyag √∂sszesen
    int waste = 0;            // ‚ôªÔ∏è Marad√©k mm
    QUuid materialId;         // üîó Az anyag azonos√≠t√≥ja (UUID)
    int totalLength = 0;      // üìè Anyag hossz (mm)
    QString rodId;            // üìÑ Reusable barcode, ha van
    QUuid machineId;   // a g√©p azonos√≠t√≥ja
    QString machineName;   // csak UI/audit
    double kerfUsed_mm = 0.0; // audit fix√°l√°s

    Cutting::Plan::Source source = Cutting::Plan::Source::Stock; // anyag forr√°sas

    Status status = Status::NotStarted; // terv√°llapot

    QUuid planId = QUuid::createUuid(); // ‚úÖ automatikus UUID, egyedi tervazonos√≠t√≥

    QVector<Cutting::Segment::SegmentModel> segments; // üß± V√°g√°si szakaszok ‚Äî vizu√°lis √©s logikai bont√°s
    QVector<Cutting::Piece::PieceWithMaterial> piecesWithMaterial; // ‚úÇÔ∏è Lev√°gott darabok ‚Äî anyaggal egy√ºtt

    // üß† Viselked√©salap√∫ met√≥dusok
    bool isReusable() const;
    bool isFinalized() const;

    QString materialName() const;        // Anyag neve ‚Äî materialId alapj√°n
    QString materialGroupName() const;   // Anyag csoportneve ‚Äî helper alapj√°n

    Status getStatus() const;
    void setStatus(Status newStatus);

    QString pieceLengthsAsString() const;

    std::optional<QString> parentBarcode;
    std::optional<QUuid> parentPlanId;

    int planNumber = -1;   // üî¢ Glob√°lis batch-sorsz√°m (planCounter)

/**
 * @brief üìê Szakaszgener√°l√°s helper - v√°g√°si szakaszok gener√°l√°sa a darabok √©s param√©terek alapj√°n
 * @param kerf_mm V√°g√°si vesztes√©g mm-ben
 * @param totalLength_mm Az anyag teljes hossza mm-ben
 *
 * A szakaszok a piecesWithMaterial alapj√°n j√∂nnek l√©tre.
 * A SegmentUtils::generateSegments met√≥dust haszn√°lja.
 */
    void generateSegments(double kerf_mm, int totalLength_mm){
        this->segments = Cutting::Segment::SegmentUtils::generateSegments(this->piecesWithMaterial
                                                                          /* PieceWithMaterial-ek */,
                                                                          kerf_mm, totalLength_mm);

    }
    QString materialBarcode() const;

    QString machineLabel() const { return QString("%1 (kerf=%2 mm)").arg(machineName).arg(kerfUsed_mm); }
};
}  //endof namespace Plan
}  //endof namespace Cutting

