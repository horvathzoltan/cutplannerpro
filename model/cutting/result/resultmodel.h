#pragma once

#include "../piece/piecewithmaterial.h"
#include "model/cutting/result/resultsource.h"
#include "model/material/materialtype.h"
#include <QColor>
#include <QString>
#include <QUuid>
#include <QVector>

namespace Cutting{
namespace Result{

/**
 * @class ResultModel: egy v√°g√°si m≈±velet eredm√©nye
 * @brief A v√°g√°s √∫jonnan keletkezett!! marad√©kanyag√°nak - hull√≥j√°nak - le√≠r√≥ja
 * - tartalmazza a felhaszn√°lt anyagot, a lev√°gott darabokat, √©s a marad√©kot
 * - √∫jrahasznos√≠t√°s √©s UI megjelen√≠t√©s c√©lj√°b√≥l haszn√°ljuk
 * - ez alapj√°n audit√°lni anyagfelhaszn√°l√°st nem lehet,
 * de be lehet vezetni mint hull√≥t a leftoverstockba pl.
 * ami azut√°n felhaszn√°lhat√≥ optimaliz√°l√°skor.
 *
 *  OptimizerModel::_result_leftovers -be ker√ºlnek az eredm√©nyek
*/
struct ResultModel {
    QUuid materialId;               // üîó T√∂rzsb≈ël visszakereshet≈ë anyag
    int length = 0;                 // üìè Eredeti r√∫d hossza
    QVector<Cutting::Piece::PieceWithMaterial> cuts;  // ‚úÇÔ∏è Lev√°gott darabok
    int waste = 0;                 // ‚ôªÔ∏è Marad√©k (lev√°gatlan anyag)
    //LeftoverSource source = LeftoverSource::Undefined;
    ResultSource source;
    std::optional<int> optimizationId;  // Csak ha source == Optimization

    QString reusableBarcode;

    QUuid cutPlanId; // üîó Az eredeti v√°g√°si terv azonos√≠t√≥ja
    bool isFinalWaste = false; // ‚úÖ √∫j mez≈ë

    //QUuid leftoverEntryId; // csak ha source == FromReusable

    QString cutsAsString() const;
    QString sourceAsString() const;

    MaterialType materialType() const;      // üîé t√∂rzsb≈ël lek√©rhet≈ë t√≠pus
    QString materialName() const;           // üß™ megjelen√≠t√©shez
    QColor materialGroupColor() const;           // üé® badge h√°tt√©r (UI-hoz)

    bool isReusable() const { return source == ResultSource::FromReusable; }
};

}}
