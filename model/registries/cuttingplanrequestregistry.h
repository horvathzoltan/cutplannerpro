#pragma once

#include <QUuid>
#include <QVector>
#include <QHash>

#include "../cuttingplanrequest.h"

/**
 * @brief K√∂zponti registry CuttingRequest-ek t√°rol√°s√°ra √©s lek√©rdez√©s√©re.
 *
 * Egyedi anyagID-k alapj√°n t√°rolja az ig√©nyeket, t√°mogatja t√∂bb ig√©ny kezel√©s√©t egy anyaghoz.
 */
class CuttingPlanRequestRegistry {
public:
    static CuttingPlanRequestRegistry& instance();

    void registerRequest(const CuttingPlanRequest& request);
    QVector<CuttingPlanRequest> findByMaterialId(const QUuid& materialId) const;
    QVector<CuttingPlanRequest> readAll() const;

        void clear(); // üîÑ √öJ: teljes t√∂rl√©s
    void removeRequest(const QUuid &requestId);

    bool updateRequest(const CuttingPlanRequest &updated);
    std::optional<CuttingPlanRequest> findById(const QUuid& requestId) const; // ‚¨ÖÔ∏è √∫j
    bool isEmpty() const { return _data.isEmpty(); }
private:
    void persist() const;
    CuttingPlanRequestRegistry() = default;
    CuttingPlanRequestRegistry(const CuttingPlanRequestRegistry&) = delete;
    CuttingPlanRequestRegistry& operator=(const CuttingPlanRequestRegistry&) = delete;

    QVector<CuttingPlanRequest> _data;
};
