#pragma once

#include <QString>
#include <QColor>

namespace Relocation {

enum class AuditStatus {
    Uncovered,     // van lefedetlen igÃ©ny
    NotAudited,    // van maradÃ©k, de nem auditÃ¡lt
    Covered        // minden auditÃ¡lt, igÃ©ny teljesÃ­tve
};

class AuditStatusHelper {
public:
    static AuditStatus fromInstruction(int uncoveredQty,
                                       int auditedRemaining,
                                       int totalRemaining)
    {
        if (uncoveredQty > 0) {
            return AuditStatus::Uncovered;   // piros
        }
        if (totalRemaining == 0) {
            return AuditStatus::Covered;     // nincs maradÃ©k â†’ teljesen auditÃ¡lt
        }
        if (auditedRemaining >= totalRemaining) {
            return AuditStatus::Covered;     // minden maradÃ©k auditÃ¡lt
        }
        return AuditStatus::NotAudited;      // maradt auditÃ¡latlan â†’ sÃ¡rga
    }


    static QColor color(AuditStatus status) {
        switch (status) {
        case AuditStatus::Uncovered:   return QColor("#B22222"); // ğŸ”´ piros
        case AuditStatus::NotAudited:  return QColor("#FFD700"); // ğŸŸ¡ sÃ¡rga
        case AuditStatus::Covered:     return QColor("#228B22"); // ğŸŸ¢ zÃ¶ld
        }
        return QColor("#999999"); // fallback
    }

    static QString icon(AuditStatus status) {
        switch (status) {
        case AuditStatus::Uncovered:   return "ğŸ”´";
        case AuditStatus::NotAudited:  return "ğŸŸ¡";
        case AuditStatus::Covered:     return "ğŸŸ¢";
        }
        return "âšª";
    }

    static QString text(AuditStatus status) {
        switch (status) {
        case AuditStatus::Uncovered:   return "AuditÃ¡latlan hiÃ¡ny";
        case AuditStatus::NotAudited:  return "RÃ©szlegesen auditÃ¡lt";
        case AuditStatus::Covered:     return "Teljesen auditÃ¡lt";
        }
        return "Ismeretlen stÃ¡tusz";
    }
};

} // namespace Relocation
