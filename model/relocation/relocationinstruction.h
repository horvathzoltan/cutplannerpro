#pragma once

#include "model/storageaudit/storageauditrow.h"
#include <QString>

struct RelocationSourceEntry {
    QUuid locationId;       ///< Forr√°s t√°rhely azonos√≠t√≥
    QString locationName;   ///< Forr√°s t√°rhely neve
    int available = 0;      ///< El√©rhet≈ë mennyis√©g a stockban
    int moved = 0;          ///< Innen t√©nylegesen elmozgatott mennyis√©g
};

struct RelocationTargetEntry {
    QUuid locationId;       ///< C√©l t√°rhely azonos√≠t√≥
    QString locationName;   ///< C√©l t√°rhely neve
    int placed = 0;         ///< Ide t√©nylegesen lerakott mennyis√©g
};

#pragma once

#include "model/storageaudit/storageauditrow.h"
#include <QString>
#include <QUuid>
#include <optional>
#include <QVector>

/**
 * @brief Egy relok√°ci√≥s terv egyetlen sor√°t reprezent√°l√≥ adatstrukt√∫ra.
 *
 * A RelocationInstruction tartalmaz minden inform√°ci√≥t, ami sz√ºks√©ges ahhoz,
 * hogy egy anyag mozgat√°s√°t vagy megl√©t√©nek meger≈ës√≠t√©s√©t a felhaszn√°l√≥
 * sz√°m√°ra egy√©rtelm≈±en megjelen√≠ts√ºk a t√°bl√°ban.
 *
 * Mez≈ëk:
 * - materialName: az anyag k√≥dja vagy megnevez√©se
 * - plannedQuantity: a terv szerinti mozgatand√≥ mennyis√©g
 * - executedQuantity: a t√©nylegesen v√©grehajtott mennyis√©g (Finalize ut√°n r√∂gz√ºl)
 * - sources: forr√°s t√°rhelyek √©s mennyis√©gek list√°ja
 * - targets: c√©l t√°rhelyek √©s mennyis√©gek list√°ja
 * - isSatisfied: jelzi, hogy a terv teljes√ºlt-e (‚úî Megvan st√°tusz)
 * - barcode: azonos√≠t√≥, k√ºl√∂n√∂sen hull√≥kn√°l fontos (egyedi r√∫d)
 * - sourceType: a forr√°s t√≠pusa (Stock vagy Hull√≥)
 * - materialId: az anyag egyedi azonos√≠t√≥ja (UUID)
 */
struct RelocationInstruction {

    // Norm√°l sor ctor
    explicit RelocationInstruction(const QString& materialName,
                                   int plannedQuantity,
                                   bool isSatisfied,
                                   const QString& barcode,
                                   AuditSourceType sourceType,
                                   const QUuid& materialId)
        : materialName(materialName),
        plannedQuantity(plannedQuantity),
        isSatisfied(isSatisfied),
        barcode(barcode),
        sourceType(sourceType),
        materialId(materialId)
    {}

    // √ñsszes√≠t≈ë sor ctor
    RelocationInstruction(const QString& materialName,
                          int requiredQty,
                          int totalRemaining,
                          int auditedRemaining,
                          int movedQty,
                          int uncoveredQty,
                          int coveredQty,          // üîπ t√©nyleges lefedetts√©g
                          int usedFromRemaining,   // üîπ t√©nylegesen felhaszn√°lt marad√©k
                          const QString& statusText,
                          const QString& barcode,
                          AuditSourceType sourceType,
                          const QUuid& materialId)
        : materialName(materialName),
        plannedQuantity(requiredQty),
        executedQuantity(movedQty),
        isSatisfied(uncoveredQty == 0),
        barcode(barcode),
        sourceType(sourceType),
        materialId(materialId),
        isSummary(true),
        summaryText(statusText),
        totalRemaining(totalRemaining),
        auditedRemaining(auditedRemaining),
        movedQty(movedQty),
        uncoveredQty(uncoveredQty),
        coveredQty(coveredQty),
        usedFromRemaining(usedFromRemaining)   // üîπ kit√∂ltj√ºk
    {}

    QString materialName;
    int plannedQuantity;
    std::optional<int> executedQuantity;

    QVector<RelocationSourceEntry> sources;
    QVector<RelocationTargetEntry> targets;

    bool isSatisfied = false;
    QString barcode;
    AuditSourceType sourceType;
    QUuid materialId;

    // √ñsszes√≠t≈ë sor mez≈ëk
    bool isSummary = false;
    QString summaryText;
    int totalRemaining = 0;       ///< Teljes k√©szlet (audit√°lt + nem audit√°lt)
    int auditedRemaining = 0;     ///< Audit√°lt k√©szlet
    int movedQty = 0;             ///< Odavitt mennyis√©g
    int uncoveredQty = 0;         ///< Lefedetlen ig√©ny
    int coveredQty = 0;           ///< Ig√©nyb≈ël t√©nylegesen lefedett mennyis√©g
    int usedFromRemaining = 0;    ///< üîπ Lefed√©shez t√©nylegesen felhaszn√°lt marad√©k
};
