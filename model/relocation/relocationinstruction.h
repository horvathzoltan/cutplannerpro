#pragma once

#include "model/relocation/relocationsourceentry.h"
#include "model/relocation/relocationtargetentry.h"
#include "model/storageaudit/storageauditrow.h"
#include <QString>
#include <QUuid>
#include <optional>
#include <QVector>

/**
 * @brief Egy relok√°ci√≥s terv egyetlen sor√°t reprezent√°l√≥ adatstrukt√∫ra.
 *
 * A RelocationInstruction tartalmaz minden inform√°ci√≥t, ami sz√ºks√©ges ahhoz,
 * hogy egy anyag mozgat√°s√°t, megl√©t√©t vagy lefedetts√©g√©t a felhaszn√°l√≥
 * sz√°m√°ra egy√©rtelm≈±en megjelen√≠ts√ºk a relok√°ci√≥s t√°bl√°ban.
 *
 * Mez≈ëk:
 * - materialName: az anyag k√≥dja vagy megnevez√©se
 * - plannedQuantity: a terv szerinti mozgatand√≥ mennyis√©g (ig√©ny)
 * - executedQuantity: a t√©nylegesen v√©grehajtott mennyis√©g (Finalize ut√°n r√∂gz√ºl)
 * - isFinalized: jelzi, hogy a sor v√©gleges√≠tve lett-e (t√∂bbsz√∂r nem m√≥dos√≠that√≥)
 * - sources: forr√°s t√°rhelyek √©s az onnan elmozgatott mennyis√©gek list√°ja
 * - targets: c√©l t√°rhelyek √©s az oda lerakott mennyis√©gek list√°ja
 * - isSatisfied: jelzi, hogy a terv teljes√ºlt-e (‚úî Megvan st√°tusz)
 * - barcode: azonos√≠t√≥, k√ºl√∂n√∂sen hull√≥kn√°l fontos (egyedi r√∫d)
 * - sourceType: a forr√°s t√≠pusa (Stock vagy Hull√≥)
 * - materialId: az anyag egyedi azonos√≠t√≥ja (UUID)
 *
 * √ñsszes√≠t≈ë sor eset√©n:
 * - isSummary: jelzi, hogy a sor √∂sszes√≠t≈ë t√≠pus√∫ (nem konkr√©t anyagmozgat√°s)
 * - summaryText: st√°tusz sz√∂veg (tooltiphez)
 * - totalRemaining: teljes k√©szlet (audit√°lt + nem audit√°lt)
 * - auditedRemaining: audit√°lt k√©szlet
 * - movedQty: odavitt mennyis√©g (√∫j mozgat√°s)
 * - uncoveredQty: lefedetlen ig√©ny (hi√°ny)
 * - coveredQty: t√©nylegesen lefedett mennyis√©g
 * - usedFromRemaining: lefed√©shez t√©nylegesen felhaszn√°lt marad√©k
 *
 * Seg√©df√ºggv√©nyek:
 * - isReadyToFinalize(): visszaadja, hogy a sor v√©gleges√≠thet≈ë-e
 * - isAlreadyFinalized(): visszaadja, hogy a sor m√°r v√©gleges√≠tve lett-e
 * - isFullyCovered(): visszaadja, hogy a dial√≥gusban megadott mennyis√©gek teljesen lefedik-e az ig√©nyt
 * - hasPartialExecution(): visszaadja, hogy t√∂rt√©nt-e r√©szleges mozgat√°s (munkak√∂zi √°llapot)
 */

struct RelocationInstruction {

    // Norm√°l sor ctor
    explicit RelocationInstruction(const QString& materialName,
                                   int plannedQuantity,
                                   bool isSatisfied,
                                   const QString& barcode,
                                   AuditSourceType sourceType,
                                   const QUuid& materialId)
        : materialName(materialName),
        plannedQuantity(plannedQuantity),
        isSatisfied(isSatisfied),
        barcode(barcode),
        sourceType(sourceType),
        materialId(materialId)
    {}

    // √ñsszes√≠t≈ë sor ctor
    RelocationInstruction(const QString& materialName,
                          int requiredQty,
                          int totalRemaining,
                          int auditedRemaining,
                          int movedQty,
                          int uncoveredQty,
                          int coveredQty,
                          int usedFromRemaining,
                          const QString& statusText,
                          const QString& barcode,
                          AuditSourceType sourceType,
                          const QUuid& materialId)
        : materialName(materialName),
        plannedQuantity(requiredQty),
        executedQuantity(movedQty),
        isSatisfied(uncoveredQty == 0),
        barcode(barcode),
        sourceType(sourceType),
        materialId(materialId),
        isSummary(true),
        summaryText(statusText),
        totalRemaining(totalRemaining),
        auditedRemaining(auditedRemaining),
        movedQty(movedQty),
        uncoveredQty(uncoveredQty),
        coveredQty(coveredQty),
        usedFromRemaining(usedFromRemaining)
    {}

    QUuid rowId = QUuid::createUuid(); ///< Egyedi sorazonos√≠t√≥ ‚Äì a t√°bl√°ban val√≥ hivatkoz√°shoz

    QString materialName;                     ///< Anyag neve
    int plannedQuantity = 0;                  ///< Ig√©ny szerinti mennyis√©g
    std::optional<int> executedQuantity;      ///< T√©nylegesen v√©grehajtott mennyis√©g (Finalize ut√°n)
    bool isFinalized = false;                 ///< Jelzi, hogy a sor v√©gleges√≠tve lett-e

    QVector<RelocationSourceEntry> sources;   ///< Forr√°s t√°rhelyek
    QVector<RelocationTargetEntry> targets;   ///< C√©l t√°rhelyek

    bool isSatisfied = false;                 ///< ‚úî Megvan st√°tusz
    QString barcode;                          ///< Vonalk√≥d (k√ºl√∂n√∂sen hull√≥kn√°l)
    AuditSourceType sourceType;               ///< Forr√°s t√≠pusa
    QUuid materialId;                         ///< Anyag UUID

    // √ñsszes√≠t≈ë sor mez≈ëk
    bool isSummary = false;
    QString summaryText;
    int totalRemaining = 0;       ///< Teljes k√©szlet (audit√°lt + nem audit√°lt)
    int auditedRemaining = 0;     ///< Audit√°lt k√©szlet
    int movedQty = 0;             ///< Odavitt mennyis√©g
    int uncoveredQty = 0;         ///< Lefedetlen ig√©ny
    int coveredQty = 0;           ///< Ig√©nyb≈ël t√©nylegesen lefedett mennyis√©g
    int usedFromRemaining = 0;    ///< üîπ Lefed√©shez t√©nylegesen felhaszn√°lt marad√©k

    // üîπ Megadja, hogy a sor v√©gleges√≠thet≈ë-e (azaz a dial√≥gusban minden mennyis√©g meg van adva)
    bool isReadyToFinalize() const {
        // Csak akkor finaliz√°lhat√≥, ha van executedQuantity, √©s az pontosan megegyezik a plannedQuantity-vel
        return executedQuantity.has_value() && executedQuantity.value() == plannedQuantity;
    }

    // üîπ Megadja, hogy a sor m√°r v√©gleges√≠tve lett-e
    bool isAlreadyFinalized() const {
        return isFinalized;
    }

    // üîπ Megadja, hogy a dial√≥gusban megadott mennyis√©gek teljesen lefedik-e az ig√©nyt
    bool isFullyCovered() const {
        // Akkor tekintj√ºk teljesen lefedettnek, ha a sources + targets √∂sszege pontosan megegyezik a plannedQuantity-vel
        int totalMoved = 0;
        for (const auto& src : sources)
            totalMoved += src.moved;

        int totalPlaced = 0;
        for (const auto& tgt : targets)
            totalPlaced += tgt.placed;

        return totalMoved == plannedQuantity && totalPlaced == plannedQuantity;
    }

    // üîπ Megadja, hogy a dial√≥gusban van-e b√°rmilyen adat (azaz elkezdett munka)
    bool hasPartialExecution() const {
        int totalMoved = 0;
        for (const auto& src : sources)
            totalMoved += src.moved;

        int totalPlaced = 0;
        for (const auto& tgt : targets)
            totalPlaced += tgt.placed;

        return totalMoved > 0 || totalPlaced > 0;
    }

};
