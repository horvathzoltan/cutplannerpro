#pragma once

#include <QList>
#include <QUuid>
#include "auditgroupinfo.h"
#include "model/storageaudit/auditstatus.h"
//#include "model/storageaudit/audit_enums.h"

struct StorageAuditRow; // forward declaration

struct AuditContext {
public:
    //AuditContext() = default;   // ‚úÖ enged√©lyezi a default konstruktort
    explicit AuditContext(const QString& groupKey, const QUuid& matId)
        : materialId(matId), group(groupKey) {}

    QUuid materialId;           // üì¶ Anyag azonos√≠t√≥
    int totalExpected = 0;      // üéØ √ñsszes elv√°rt mennyis√©g
    int totalActual = 0;        // ‚úÖ √ñsszes t√©nyleges mennyis√©g
    AuditGroupInfo group;       // Csoport metaadat

    QList<StorageAuditRow*> _groupRows; // üîó k√∂zvetlen pointerek a sorokra

    [[nodiscard]] int totalCount() const noexcept {
        return _groupRows.size();
    }

    void setGroupRows(const QList<StorageAuditRow*>& rows) {
        _groupRows = rows;
    }

    int confirmedCount() const;

    [[nodiscard]] int missingQuantity() const noexcept {
         return std::clamp(totalExpected - totalActual, 0, totalExpected);
     }

    /**
 * @brief Meg√°llap√≠tja, hogy a csoport legal√°bb egy sora audit√°lt-e.
 *
 * A csoport audit√°ltnak sz√°m√≠t, ha legal√°bb egy sorban t√∂rt√©nt felhaszn√°l√≥i beavatkoz√°s:
 * - m√≥dos√≠tott√°k a mennyis√©get (`isRowModified == true`), vagy
 * - bepip√°lt√°k audit√°ltnak (`isRowAuditChecked == true`).
 *
 * Ez a f√ºggv√©ny nem vizsg√°lja, hogy a mennyis√©g teljes√ºlt-e, csak azt, hogy t√∂rt√©nt-e audit.
 * A `statusType()` √©s `statusText()` f√ºggv√©nyek ezt haszn√°lj√°k annak eld√∂nt√©s√©re,
 * hogy a csoport audit√°ltnak tekinthet≈ë-e.
 *
 * @return true, ha legal√°bb egy sor audit√°lt; k√ºl√∂nben false.
 */
    [[nodiscard]] bool isGroupAudited() const;

    [[nodiscard]] bool isGroupPartiallyAudited() const;

     /**
 * @brief Meg√°llap√≠tja, hogy a csoport √∂sszes sora teljes√≠tette-e az elv√°rt mennyis√©get.
 *
 * A csoport akkor tekinthet≈ë teljes√ºltnek, ha minden sorban:
 * `actualQuantity >= pickingQuantity` ‚Üí az ig√©ny teljes√ºlt.
 *
 * Ez a f√ºggv√©ny nem vizsg√°lja, hogy audit√°lt-e a sor, csak a mennyis√©gi teljes√ºl√©st.
 * A `AuditStatus::fromGroup()` √©s `statusType()` ezt haszn√°lj√°k annak eld√∂nt√©s√©re,
 * hogy a csoport st√°tusza "OK" vagy "Pending" legyen.
 *
 * @return true, ha minden sor teljes√ºlt; k√ºl√∂nben false.
 */
    [[nodiscard]] bool isGroupFulfilled() const;

    AuditStatus status() const {
        if (totalCount() == 0) return AuditStatus(AuditStatus::NotAudited);
        if (!isGroupAudited()) return AuditStatus(AuditStatus::NotAudited);
        if (isGroupPartiallyAudited()) return AuditStatus(AuditStatus::Audited_Partial);
        return isGroupFulfilled()
                   ? AuditStatus(AuditStatus::Audited_Fulfilled)
                   : AuditStatus(AuditStatus::Audited_Unfulfilled);
    }

    QString statusText() const {
        AuditStatus s = status();
        const QString base = AuditStatus::statusEmoji(s.get()) + " " + s.toText();

        switch (s.get()) {
        case AuditStatus::Audited_Partial:
        case AuditStatus::Audited_Unfulfilled:
        case AuditStatus::Audited_Fulfilled:
            return base + " (csoport)";
        default:
            return base;
        }
    }




};
