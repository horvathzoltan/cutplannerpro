#pragma once

#include <QList>
#include <QUuid>
#include "auditgroupinfo.h"
#include "model/storageaudit/audit_enums.h"

struct StorageAuditRow; // forward declaration

struct AuditContext {
public:
    //AuditContext() = default;   // ‚úÖ enged√©lyezi a default konstruktort
    explicit AuditContext(const QString& groupKey, const QUuid& matId)
        : materialId(matId), group(groupKey) {}

    QUuid materialId;           // üì¶ Anyag azonos√≠t√≥
    int totalExpected = 0;      // üéØ √ñsszes elv√°rt mennyis√©g
    int totalActual = 0;        // ‚úÖ √ñsszes t√©nyleges mennyis√©g
    AuditGroupInfo group;       // Csoport metaadat

    //int confirmedCount = 0;   // ‚úÖ h√°ny sor van pip√°lva
    //int totalCount = 0;       // üìã h√°ny sor tartozik a csoportba

    [[nodiscard]] int totalCount() const noexcept {
        return group.size();
    }

    int confirmedCount = 0;   // k√≠v√ºlr≈ël vezetve:  ‚úÖ h√°ny sor van pip√°lva;
   // [[nodiscard]] int confirmedCount() const;
    /**
 * @brief Csoportszint≈± hi√°ny sz√°m√≠t√°sa.
 *
 * Az AuditContext azonos anyag+hely csoport √∂sszes√≠tett adatait tartalmazza.
 * Ez a met√≥dus a teljes csoport hi√°ny√°t adja vissza:
 *   totalExpected - totalActual
 *
 * @note Az eredm√©ny mindig 0 √©s totalExpected k√∂z√© van szor√≠tva.
 *       - Negat√≠v hi√°ny nem fordulhat el≈ë.
 *       - A hi√°ny nem lehet nagyobb, mint az elv√°rt mennyis√©g.
 *
 * @return int A csoport szint≈± hi√°nyz√≥ mennyis√©g.
 */
     [[nodiscard]] int missingQuantity() const noexcept {
         return std::clamp(totalExpected - totalActual, 0, totalExpected);
     }

     [[nodiscard]] AuditPresence groupPresence() const {
         int confirmed = confirmedCount;
         if (confirmed == 0) return AuditPresence::Unknown;
         if (confirmed < totalCount()) return AuditPresence::Missing;
         return AuditPresence::Present;
     }

     [[nodiscard]] AuditResult groupAuditResult() const {
         int confirmed = confirmedCount;
         if (confirmed == 0) return AuditResult::NotAudited;
         if (confirmed < totalCount()) return AuditResult::AuditedPartial;
         return AuditResult::AuditedOk;
     }

};
