#pragma once

#include "common/styleprofiles/auditcolors.h"
//#include "model/storageaudit/auditcontext.h"
#include <QColor>
#include <QString>

class AuditStatus {
public:
    enum Value {
        Audited_Fulfilled,     // ‚úÖ Audit√°lt √©s teljes√ºlt
        Audited_Missing,       // üü• Audit√°lt, de nincs k√©szlet
        Audited_Unfulfilled,   // üü° Audit√°lt, de r√©szben teljes√ºlt
        Audited_Partial,       // üü† R√©szlegesen audit√°lt csoport
        RegisteredOnly,        // üîµ Regisztr√°lt, nincs elv√°r√°s
        NotAudited             // ‚ö™ M√©g nem audit√°lt
    };

    // Konstruktor
    explicit AuditStatus(Value v = NotAudited) : value(v) {}

    // Konverzi√≥ sz√∂vegre
    QString toText() const {
        switch (value) {
        case Audited_Fulfilled:    return "Audit√°lt, teljes√ºlt";
        case Audited_Missing:      return "Audit√°lt, nincs k√©szlet";
        case Audited_Unfulfilled:  return "Audit√°lt, r√©szben teljes√ºlt";
        case Audited_Partial:      return "R√©szlegesen audit√°lt";
        case RegisteredOnly:       return "Regisztr√°lt (nincs elv√°r√°s)";
        case NotAudited:           return "Nem audit√°lt";
        default:                   return "-";
        }
    }

    static QString statusEmoji(Value v) {
        switch (v) {
        case Audited_Fulfilled:    return "‚úÖ";
        case Audited_Missing:      return "üü•";
        case Audited_Unfulfilled:  return "üü°";
        case Audited_Partial:      return "üü†";
        case RegisteredOnly:       return "üîµ";
        case NotAudited:           return "‚ö™";
        default:                   return "‚ö™";
        }
    }

    static QString toDecoratedText(Value v) {
        return statusEmoji(v) + " " + AuditStatus(v).toText();
    }

    // Konverzi√≥ sz√≠nre
    QColor toColor() const {
        switch (value) {
        case Audited_Fulfilled:    return AuditColors::Ok;
        case Audited_Missing:      return AuditColors::Missing;
        case Audited_Unfulfilled:  return AuditColors::Pending;
        case Audited_Partial:      return AuditColors::PartialAudit;
        case RegisteredOnly:       return AuditColors::Info;
        case NotAudited:           return AuditColors::Unknown;
        default:                   return AuditColors::Unknown;
        }
    }

    // Getter az enum √©rt√©khez
    Value get() const { return value; }

    // K√©nyelmi oper√°torok
    operator Value() const { return value; }
    bool operator==(Value v) const { return value == v; }
    bool operator!=(Value v) const { return value != v; }



    QString toDecoratedText() const { return toDecoratedText(value); }

    // üîπ Kieg√©sz√≠tett sz√∂veg (pl. m√≥dos√≠tva, hull√≥, stb.)
    static QString withSuffix(Value v, const QString& suffix) {
        return toDecoratedText(v) + " " + suffix;
    }

    // üîπ Standard suffixek
    static QString suffix_HulloVan()        { return "(hull√≥, van)"; }
    static QString suffix_HulloNincs()      { return "(hull√≥, nincs)"; }
    static QString suffix_HulloNemAudit()   { return "(hull√≥)"; }
    static QString suffix_Modositva()       { return "(m√≥dos√≠tva)"; }
    static QString suffix_ModositvaNincs()  { return "(m√≥dos√≠tva, nincs k√©szlet)"; }
    static QString suffix_NincsKeszlet()    { return "(nincs k√©szlet)"; }
    static QString suffix_ReszbenTeljesult() { return "(r√©szben teljes√ºlt)"; }

    static QString suffix_CsoportReszbenTeljesult() { return "(csoport, r√©szben teljes√ºlt)"; }
    static QString suffix_CsoportReszlegesAudit() { return "(csoport, r√©szleges audit)"; }

private:
    Value value;
};

