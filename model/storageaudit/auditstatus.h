#pragma once

#include "common/styleprofiles/auditcolors.h"
#include "model/storageaudit/audit_enums.h"
#include <QColor>
#include <QString>


class AuditStatus {
public:
    enum Value {
        Ok,       // elv√°rt teljes√ºl
        Missing,  // semmi nincs jelen
        Pending,  // r√©szben jelen, de nem el√©g
        Info,     // nincs elv√°r√°s (optimize el≈ëtt, vagy csak inform√°ci√≥)
        Unknown
    };

    // Konstruktor
    explicit AuditStatus(Value v = Unknown) : value(v) {}

    // Konverzi√≥ sz√∂vegre
    QString toText() const {
        switch (value) {
        case Ok:      return "OK";
        case Missing: return "Hi√°nyzik";
        case Pending: return "Ellen≈ërz√©sre v√°r";
        case Info:    return "Regisztr√°lt";
        default:      return "-";
        }
    }

    // Konverzi√≥ sz√≠nre
    QColor toColor() const {
        switch (value) {
        case Ok:      return AuditColors::Ok;       // z√∂ld
        case Missing: return AuditColors::Missing;  // piros
        case Pending: return AuditColors::Pending;  // s√°rga/narancs
        case Info:    return AuditColors::Info;     // k√©kes/sz√ºrke
        default:      return AuditColors::Unknown;  // sz√ºrke
        }
    }

    // Getter az enum √©rt√©khez
    Value get() const { return value; }

    // K√©nyelmi oper√°torok
    operator Value() const { return value; }
    bool operator==(Value v) const { return value == v; }
    bool operator!=(Value v) const { return value != v; }


    // üîπ AuditPresence ‚Üí AuditStatus
    static AuditStatus fromPresence(AuditPresence presence) {
        switch (presence) {
        case AuditPresence::Unknown: return AuditStatus(Unknown);
        case AuditPresence::Missing: return AuditStatus(Pending);
        case AuditPresence::Present: return AuditStatus(Ok);
        }
        return AuditStatus(Unknown);
    }

    // üîπ Csoportos st√°tusz sz√∂veg
    static QString fromPresenceText(AuditPresence presence) {
        switch (presence) {
        case AuditPresence::Unknown: return "‚ö™ Nem audit√°lt (csoport)";
        case AuditPresence::Missing: return "üü° R√©szlegesen audit√°lt (csoport)";
        case AuditPresence::Present: return "üü¢ Audit√°lva (csoport)";
        }
        return "‚ö™ Nem audit√°lt (csoport)";
    }

    static QString toDecoratedText(Value v) {
        switch (v) {
        case Ok:      return "üü¢ Audit√°lt";
        case Missing: return "üü† Audit√°lt (nincs k√©szlet)";
        case Pending: return "üü° Audit√°lt (r√©szleges)";
        case Info:    return "üîµ Regisztr√°lt";
        default:      return "‚ö™ Nem audit√°lt";
        }
    }

    QString toDecoratedText() const { return toDecoratedText(value); }

    // üîπ Kieg√©sz√≠tett sz√∂veg (pl. m√≥dos√≠tva, hull√≥, stb.)
    static QString withSuffix(Value v, const QString& suffix) {
        return toDecoratedText(v) + " " + suffix;
    }

    // üîπ Standard suffixek
    static QString suffixHull√≥Van()        { return QStringLiteral("(hull√≥, van)"); }
    static QString suffixHull√≥Nincs()      { return "(hull√≥, nincs)"; }
    static QString suffixHull√≥NemAudit()   { return "(hull√≥)"; }
    static QString suffixM√≥dos√≠tva()       { return "(m√≥dos√≠tva)"; }
    static QString suffixM√≥dos√≠tvaNincs()  { return "(m√≥dos√≠tva, nincs k√©szlet)"; }
    static QString suffixNincsK√©szlet()    { return "(nincs k√©szlet)"; }
private:
    Value value;
};

// enum AuditStatus {
//     Ok,       // elv√°rt teljes√ºl
//     Missing,  // semmi nincs jelen
//     Pending,  // r√©szben jelen, de nem el√©g
//     Info,     // nincs elv√°r√°s (optimize el≈ëtt, vagy csak inform√°ci√≥)
//     Unknown
// };

// namespace StorageAudit{
// namespace Status{

// inline QString toText(AuditStatus s) {
//     switch (s) {
//     case AuditStatus::Ok:      return "OK";
//     case AuditStatus::Missing: return "Hi√°nyzik";
//     case AuditStatus::Pending: return "Ellen≈ërz√©sre v√°r";
//     case AuditStatus::Info:    return "Regisztr√°lt";
//     default:                   return "-";
//     }
// }

// inline QColor toColor(AuditStatus s) {
//     switch (s) {
//     case AuditStatus::Ok:      return AuditColors::Ok; // z√∂ld
//     case AuditStatus::Missing: return AuditColors::Missing; // piros
//     case AuditStatus::Pending: return AuditColors::Pending; // narancs
//     case AuditStatus::Info:    return AuditColors::Info;
//     default:                   return AuditColors::Unknown;
//     }
// }


// }
// }
