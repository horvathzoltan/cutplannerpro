#pragma once

#include "model/stockentry.h"
#include <QString>
#include <QUuid>
#include <model/registries/leftoverstockregistry.h>
#include <model/registries/stockregistry.h>
#include "model/storageaudit/auditcontext.h"
#include "model/storageaudit/auditstatus.h"
#include "model/storageaudit/auditstatus_text.h"

enum class AuditSourceType {
    Stock,
    Leftover
};

enum class AuditPresence {
    Unknown,
    Present,
    Missing
};


struct StorageAuditRow {
    QUuid rowId = QUuid::createUuid(); // Egyedi azonos√≠t√≥ (CRUD m≈±veletekhez is kell)
    QUuid materialId;                  // Anyag azonos√≠t√≥ (UUID)
    QUuid stockEntryId;                // Kapcsolat a StockEntry-hez
    AuditSourceType sourceType = AuditSourceType::Stock;
    AuditPresence presence = AuditPresence::Unknown;

    int pickingQuantity = 0;       // Elv√°rt mennyis√©g (soronk√©nt, injekt√°l√°s ut√°n)
    int actualQuantity = 0;        // Audit sor√°n tal√°lt mennyis√©g
    bool isInOptimization = false; // R√©sze-e az optimaliz√°ci√≥nak

    QString barcode;               // Vonalk√≥d (ha van)
    QString storageName;           // T√°rol√≥ neve
    QUuid rootStorageId; // üÜï G√©pszint≈± csoportos√≠t√°shoz sz√ºks√©ges

    // Kontextus pointer: azonos anyag+hely csoport √∂sszes√≠tett adatai
    std::shared_ptr<AuditContext> context;

    // Hi√°nyz√≥ mennyis√©g sz√°m√≠t√°sa
    // ‚ö†Ô∏è Fontos: ha van context, akkor az √∂sszes√≠tett √©rt√©kekb≈ël sz√°molunk,
    // nem a sor lok√°lis pickingQuantity-j√°b√≥l.
    // üß† A hi√°ny sosem lehet negat√≠v ‚Äî audit√°l√°s c√©lja a teljes√ºl√©s ellen≈ërz√©se, nem a t√∂bblet kimutat√°sa.
    int missingQuantity() const {
        if (context) {
            int expected = context->totalExpected;
            int actual   = context->totalActual;

            // üîí V√©dj√ºk a negat√≠v √©rt√©k ellen
            return std::max(0, expected - actual);
        }

        // üîπ Egyedi sor eset√©n: lok√°lis hi√°ny, de szint√©n v√©dve
        return std::max(0, pickingQuantity - actualQuantity);
    }


    // T√°rol√≥ UUID lek√©r√©se a StockRegistry-b≈ël
    QUuid storageId() const {
        std::optional<StockEntry> s =
            StockRegistry::instance().findById(stockEntryId);
        if(!s.has_value()) return QUuid();
        return s.value().storageId;
    }

    // Sz√∂veges st√°tusz (UI-hoz)
    QString status() const {
        // Hull√≥ audit eset√©n k√ºl√∂n logika
        if (sourceType == AuditSourceType::Leftover) {
            if (isInOptimization) {
                if (actualQuantity > 0)
                    return "Felhaszn√°l√°s alatt, OK";
                else
                    return "Felhaszn√°l√°s alatt, nincs meger≈ës√≠tve";
            } else {
                return "Regisztr√°lt hull√≥"; // nincs elv√°rt ‚Üí semleges st√°tusz
            }
        }

        // Stock audit eset√©n
        if (pickingQuantity == 0) {
            // nincs elv√°rt mennyis√©g ‚Üí nincs viszony√≠t√°si alap
            return "Regisztr√°lt k√©szlet";
        }

        // Ha van elv√°rt mennyis√©g, akkor audit st√°tusz √©rtelmezhet≈ë
        switch (presence) {
        case AuditPresence::Present:
            return "OK";
        case AuditPresence::Missing:
            return QString("Hi√°nyz√≥ mennyis√©g: %1").arg(missingQuantity());
        case AuditPresence::Unknown:
            return "Ellen≈ërz√©sre v√°r";
        }
        return "-";
    }

    // Audit st√°tusz t√≠pus (ikonhoz, sz√≠nez√©shez)
    AuditStatus statusType() const {
        // Ha nem r√©sze az optimaliz√°ci√≥nak ‚Üí csak inform√°ci√≥
        if (!isInOptimization) {
            return AuditStatus::Info;
        }

        // Ha nincs context, fallback a lok√°lis mez≈ëkre
        if (!context) {
            if (pickingQuantity == 0 && actualQuantity > 0)
                return AuditStatus::Info;
            if (pickingQuantity == 0)
                return AuditStatus::Info;
            if (actualQuantity == 0)
                return AuditStatus::Missing;
            if (actualQuantity < pickingQuantity)
                return AuditStatus::Pending;
            if (actualQuantity >= pickingQuantity)
                return AuditStatus::Ok;
            return AuditStatus::Unknown;
        }

        // Kontextus szerinti √©rt√©kel√©s (anyag+hely csoport szinten)
        const int expected = context->totalExpected;
        const int actual   = context->totalActual;

        if (expected == 0 && actual > 0) return AuditStatus::Info;
        if (expected == 0 && actual == 0) return AuditStatus::Info;
        if (actual == 0) return AuditStatus::Missing;
        if (actual < expected) return AuditStatus::Pending;
        if (actual >= expected) return AuditStatus::Ok;

        return AuditStatus::Unknown;
    }

    // Sz√∂veges st√°tusz (konzisztens a statusType()-pal)
    QString statusText() const {
        if (sourceType == AuditSourceType::Leftover && isInOptimization) {
            if (actualQuantity > 0) return "Felhaszn√°l√°s alatt, OK";
        }
        return StorageAudit::Status::toText(statusType());
    }
};

