#pragma once

#include "model/stockentry.h"
#include <QString>
#include <QUuid>
#include <model/registries/leftoverstockregistry.h>
#include <model/registries/stockregistry.h>
#include "model/storageaudit/auditcontext.h"
#include "model/storageaudit/auditstatus.h"
//#include "model/storageaudit/auditstatus_text.h"


struct StorageAuditRow {
    QUuid rowId = QUuid::createUuid(); // Egyedi azonos√≠t√≥ (CRUD m≈±veletekhez is kell)
    QUuid materialId;                  // Anyag azonos√≠t√≥ (UUID)
    QUuid stockEntryId;                // Kapcsolat a StockEntry-hez
    AuditSourceType sourceType = AuditSourceType::Stock;
    //AuditPresence rowPresence = AuditPresence::Unknown;

    bool isFulfilled() const {
        return actualQuantity >= pickingQuantity;
    }

    int pickingQuantity = 0;       // Elv√°rt mennyis√©g (soronk√©nt, injekt√°l√°s ut√°n)
    //int actualQuantity = 0;        // Audit sor√°n tal√°lt mennyis√©g
    bool isInOptimization = false; // R√©sze-e az optimaliz√°ci√≥nak

    int originalQuantity;
    int actualQuantity;

    bool isRowModified = false; // sor szint≈± M√≥dosult-e az eredeti √©rt√©khez k√©pest
    bool isRowAuditChecked = false; // sor szint≈± pipa √°llapota
    //AuditResult rowAuditResult; // sor szint≈± Audit √°llapot

    bool isAudited() const {
        return isRowModified || isRowAuditChecked;
    }

    QString barcode;               // Vonalk√≥d (ha van)
    QString storageName;           // T√°rol√≥ neve
    QUuid rootStorageId; // üÜï G√©pszint≈± csoportos√≠t√°shoz sz√ºks√©ges

    // Kontextus pointer: azonos anyag+hely csoport √∂sszes√≠tett adatai
    std::shared_ptr<AuditContext> context;

    /**
 * @brief Hi√°nyz√≥ mennyis√©g sz√°m√≠t√°sa sor szinten.
 *
 * - Ha van hozz√°rendelt AuditContext, akkor a csoport szint≈± hi√°nyt adja vissza
 *   (deleg√°l a AuditContext::missingQuantity()-ra).
 * - Ha nincs AuditContext, akkor a sor saj√°t pickingQuantity √©s actualQuantity
 *   mez≈ëi alapj√°n sz√°molja a hi√°nyt.
 *
 * @note A hi√°ny sosem lehet negat√≠v. A c√©l az audit teljes√ºl√©s√©nek ellen≈ërz√©se,
 *       nem a t√∂bblet kimutat√°sa.
 *
 * @return int A hi√°nyz√≥ mennyis√©g (sor vagy csoport szinten).
 */
    [[nodiscard]] int missingQuantity() const noexcept {
        if (context) return context->missingQuantity();
        return std::max(0, pickingQuantity - actualQuantity);
    }

    // T√°rol√≥ UUID lek√©r√©se a StockRegistry-b≈ël
    QUuid storageId() const {
        std::optional<StockEntry> s =
            StockRegistry::instance().findById(stockEntryId);
        if(!s.has_value()) return QUuid();
        return s.value().storageId;
    }

    // Sz√∂veges st√°tusz (UI-hoz)
    // QString status() const {
    //     // üîπ Ha a felhaszn√°l√≥ audit√°ltnak jel√∂lte (pipa)
    //     if (isRowAuditChecked) {
    //         if (actualQuantity > 0)
    //             return "Audit√°lt, OK";
    //         else
    //             return "Audit√°lt, nincs k√©szlet";
    //     }

    //     // Hull√≥ audit eset√©n k√ºl√∂n logika
    //     if (sourceType == AuditSourceType::Leftover) {
    //         if (isInOptimization) {
    //             if (actualQuantity > 0)
    //                 return "Felhaszn√°l√°s alatt, OK";
    //             else
    //                 return "Felhaszn√°l√°s alatt, nincs meger≈ës√≠tve";
    //         } else {
    //             return "Regisztr√°lt hull√≥"; // nincs elv√°rt ‚Üí semleges st√°tusz
    //         }
    //     }

    //     // Stock audit eset√©n
    //     if (pickingQuantity == 0) {
    //         // nincs elv√°rt mennyis√©g ‚Üí nincs viszony√≠t√°si alap
    //         return "Regisztr√°lt k√©szlet";
    //     }

    //     // Ha van elv√°rt mennyis√©g, akkor audit st√°tusz √©rtelmezhet≈ë
    //     switch (rowPresence) {
    //     case AuditPresence::Present:
    //         return "OK";
    //     case AuditPresence::Missing:
    //         return QString("Hi√°nyz√≥ mennyis√©g: %1").arg(missingQuantity());
    //     case AuditPresence::Unknown:
    //         return "Ellen≈ërz√©sre v√°r";
    //     }
    //     return "-";
    // }


    // AuditStatus statusType() const {
    //     // üîπ Leftover sorok k√ºl√∂n logika
    //     if (sourceType == AuditSourceType::Leftover) {
    //         if (isInOptimization) {
    //             return (actualQuantity > 0) ? AuditStatus::Ok : AuditStatus::Missing;
    //         }
    //         return AuditStatus::Info; // regisztr√°lt hull√≥
    //     }

    //     // üîπ Ha m√≥dosult ‚Üí audit√°ltk√©nt kezelj√ºk
    //     if (isRowModified) {
    //         return (actualQuantity > 0) ? AuditStatus::Ok : AuditStatus::Missing;
    //     }

    //     // üîπ Ha van context √©s a sor t√©nyleg group tag
    //     if (context && context->group.size() > 1) {
    //         switch (context->groupPresence()) {
    //         case AuditPresence::Unknown: return AuditStatus::Unknown;
    //         case AuditPresence::Missing: return AuditStatus::Pending;
    //         case AuditPresence::Present: return AuditStatus::Ok;
    //         }
    //     }

    //     // üîπ Ha nincs context ‚Üí egyedi sor logika
    //     if (isRowAuditChecked) {
    //         return (actualQuantity > 0) ? AuditStatus::Ok : AuditStatus::Missing;
    //     }

    //     return AuditStatus::Unknown;
    // }

    // QString statusText() const {
    //     // üîπ Leftover sorok k√ºl√∂n logika
    //     if (sourceType == AuditSourceType::Leftover) {
    //         if (!isRowAuditChecked) {
    //             return "‚ö™ Nem audit√°lt ‚ôªÔ∏è (hull√≥)";
    //         }
    //         return (actualQuantity > 0)
    //                    ? "üü¢ Audit√°lt ‚ôªÔ∏è (van)"
    //                    : "üü† Audit√°lt ‚ôªÔ∏è (nincs)";
    //     }

    //     // üîπ Ha m√≥dosult ‚Üí audit√°ltk√©nt kezelj√ºk
    //     if (isRowModified) {
    //         return (actualQuantity > 0)
    //         ? "üü¢ Audit√°lt (m√≥dos√≠tva)"
    //         : "üü† Audit√°lt, nincs k√©szlet (m√≥dos√≠tva)";
    //     }

    //     // üîπ Ha van context √©s a sor t√©nyleg group tag
    //     if (context && context->group.size() > 1) {
    //         switch (context->groupPresence()) {
    //         case AuditPresence::Unknown: return "‚ö™ Nem audit√°lt (csoport)";
    //         case AuditPresence::Missing: return "üü° R√©szlegesen audit√°lt (csoport)";
    //         case AuditPresence::Present: return "üü¢ Audit√°lva (csoport)";
    //         }
    //     }

    //     // üîπ Ha nincs context ‚Üí egyedi sor logika
    //     if (isRowAuditChecked) {
    //         return (actualQuantity > 0)
    //         ? "üü¢ Audit√°lva"
    //         : "üü† Audit√°lt, nincs k√©szlet";
    //     }

    //     return "‚ö™ Nem audit√°lt";
    // }

   //  AuditStatus statusType() const {
   //      // üîπ Leftover sorok k√ºl√∂n logika
   //      if (sourceType == AuditSourceType::Leftover) {
   //          if (isInOptimization) {
   //              return (actualQuantity > 0) ? AuditStatus::Ok : AuditStatus::Missing;
   //          }
   //          return AuditStatus::Info;
   //      }

   //      // üîπ Ha m√≥dosult ‚Üí audit√°ltk√©nt kezelj√ºk
   //      if (isRowModified) {
   //          return (actualQuantity > 0) ? AuditStatus::Ok : AuditStatus::Missing;
   //      }

   //      // üîπ Ha pip√°lt ‚Üí audit√°ltk√©nt kezelj√ºk
   //      if (isRowAuditChecked) {
   //          return (actualQuantity > 0) ? AuditStatus::Ok : AuditStatus::Missing;
   //      }

   //      // üîπ Ha van context √©s csoport tag
   //      if (context && context->group.size() > 1) {
   //          switch (context->groupPresence()) {
   //          case AuditPresence::Unknown: return AuditStatus::Unknown; // ‚ö™ semmi nincs audit√°lva
   //          case AuditPresence::Missing: return AuditStatus::Pending; // üü° r√©szlegesen audit√°lt
   //          case AuditPresence::Present: return AuditStatus::Ok;      // üü¢ minden audit√°lt
   //          }
   //      }

   //      return AuditStatus::Unknown;
   //  }





   //  QString statusText() const {
   //      // üîπ Leftover sorok k√ºl√∂n logika
   //      if (sourceType == AuditSourceType::Leftover) {
   //          if (!isRowAuditChecked) {
   //              return "‚ö™ Nem audit√°lt ‚ôªÔ∏è (hull√≥)";
   //          }
   //          return (actualQuantity > 0)
   //                     ? "üü¢ Audit√°lt ‚ôªÔ∏è (van)"
   //                     : "üü† Audit√°lt ‚ôªÔ∏è (nincs)";
   //      }

   //      // üîπ Ha m√≥dosult ‚Üí audit√°ltk√©nt kezelj√ºk
   //      if (isRowModified) {
   //          return (actualQuantity > 0)
   //          ? "üü¢ Audit√°lt (m√≥dos√≠tva)"
   //          : "üü† Audit√°lt, nincs k√©szlet (m√≥dos√≠tva)";
   //      }

   //      // üîπ Ha pip√°lt ‚Üí audit√°ltk√©nt kezelj√ºk
   //      if (isRowAuditChecked) {
   //          return (actualQuantity > 0)
   //          ? "üü¢ Audit√°lva"
   //          : "üü† Audit√°lt, nincs k√©szlet";
   //      }

   //      // üîπ Ha van context √©s csoport tag
   //      if (context && context->group.size() > 1) {
   //          switch (context->groupPresence()) {
   //          case AuditPresence::Unknown: return "‚ö™ Nem audit√°lt (csoport)";
   //          case AuditPresence::Missing: return "üü° R√©szlegesen audit√°lt (csoport)";
   //          case AuditPresence::Present: return "üü¢ Audit√°lva (csoport)";
   //          }
   //      }

   //      return "‚ö™ Nem audit√°lt";
   //  }

    AuditStatus statusType() const {
        // üîπ Leftover sorok k√ºl√∂n logika
        if (sourceType == AuditSourceType::Leftover) {
            if (isInOptimization) {
                return AuditStatus((actualQuantity > 0) ? AuditStatus::Ok : AuditStatus::Missing);
            }
            return AuditStatus(AuditStatus::Info);
        }

        // üîπ Sor szint≈± audit√°lts√°g (m√≥dos√≠t√°s vagy pipa)
        if (isRowModified || isRowAuditChecked) {
            return AuditStatus((actualQuantity > 0) ? AuditStatus::Ok : AuditStatus::Missing);
        }

        // üîπ Csoport szint≈± audit√°lts√°g
        if (context && context->group.size() > 1) {
            return AuditStatus::fromPresence(context->groupPresence());
        }

        // üîπ Alap√©rtelmezett
        return AuditStatus(AuditStatus::Unknown);
    }


    QString statusText() const {
        AuditStatus status = statusType();

        // üîπ Leftover sorok k√ºl√∂n jel√∂l√©ssel
        if (sourceType == AuditSourceType::Leftover) {
            if (isRowModified || isRowAuditChecked) {
                return (actualQuantity > 0)
                ? AuditStatus::withSuffix(AuditStatus::Ok, AuditStatus::suffixHull√≥Van())
                : AuditStatus::withSuffix(AuditStatus::Missing, AuditStatus::suffixHull√≥Nincs());
            }
            return AuditStatus::withSuffix(AuditStatus::Info, AuditStatus::suffixHull√≥NemAudit());
        }


        // üîπ M√≥dos√≠tott sor k√ºl√∂n jel√∂l√©ssel
        if (isRowModified) {
            return (actualQuantity > 0)
            ? AuditStatus::withSuffix(AuditStatus::Ok, AuditStatus::suffixM√≥dos√≠tva())
            : AuditStatus::withSuffix(AuditStatus::Missing, AuditStatus::suffixM√≥dos√≠tvaNincs());
        }

        // üîπ Pip√°lt sor k√ºl√∂n jel√∂l√©ssel
        if (isRowAuditChecked) {
            return (actualQuantity > 0)
            ? AuditStatus::toDecoratedText(AuditStatus::Ok)
            : AuditStatus::withSuffix(AuditStatus::Missing, AuditStatus::suffixNincsK√©szlet());
        }

        // üîπ Csoportos sor ‚Üí helperb≈ël
        if (context && context->group.size() > 1) {
            return AuditStatus::fromPresenceText(context->groupPresence());
        }

        // üîπ Egy√©bk√©nt az alap st√°tusz sz√∂vege
        return status.toDecoratedText();
    }





};

