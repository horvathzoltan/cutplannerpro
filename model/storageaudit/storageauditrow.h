#pragma once

#include "model/stockentry.h"
#include <QString>
#include <QUuid>
#include <model/registries/leftoverstockregistry.h>
#include <model/registries/stockregistry.h>
#include "model/storageaudit/auditcontext.h"
#include "model/storageaudit/auditstatus.h"
//#include "model/storageaudit/auditstatus_text.h"


struct StorageAuditRow {
    QUuid rowId = QUuid::createUuid(); // Egyedi azonos√≠t√≥ (CRUD m≈±veletekhez is kell)
    QUuid materialId;                  // Anyag azonos√≠t√≥ (UUID)
    QUuid stockEntryId;                // Kapcsolat a StockEntry-hez
    AuditSourceType sourceType = AuditSourceType::Stock;
    AuditPresence rowPresence = AuditPresence::Unknown;

    int pickingQuantity = 0;       // Elv√°rt mennyis√©g (soronk√©nt, injekt√°l√°s ut√°n)
    //int actualQuantity = 0;        // Audit sor√°n tal√°lt mennyis√©g
    bool isInOptimization = false; // R√©sze-e az optimaliz√°ci√≥nak

    int originalQuantity;
    int actualQuantity;

    bool isRowModified = false; // sor szint≈± M√≥dosult-e az eredeti √©rt√©khez k√©pest
    bool isRowAuditChecked = false; // sor szint≈± pipa √°llapota
    AuditResult rowAuditResult; // sor szint≈± Audit √°llapot

    QString barcode;               // Vonalk√≥d (ha van)
    QString storageName;           // T√°rol√≥ neve
    QUuid rootStorageId; // üÜï G√©pszint≈± csoportos√≠t√°shoz sz√ºks√©ges

    // Kontextus pointer: azonos anyag+hely csoport √∂sszes√≠tett adatai
    std::shared_ptr<AuditContext> context;

    /**
 * @brief Hi√°nyz√≥ mennyis√©g sz√°m√≠t√°sa sor szinten.
 *
 * - Ha van hozz√°rendelt AuditContext, akkor a csoport szint≈± hi√°nyt adja vissza
 *   (deleg√°l a AuditContext::missingQuantity()-ra).
 * - Ha nincs AuditContext, akkor a sor saj√°t pickingQuantity √©s actualQuantity
 *   mez≈ëi alapj√°n sz√°molja a hi√°nyt.
 *
 * @note A hi√°ny sosem lehet negat√≠v. A c√©l az audit teljes√ºl√©s√©nek ellen≈ërz√©se,
 *       nem a t√∂bblet kimutat√°sa.
 *
 * @return int A hi√°nyz√≥ mennyis√©g (sor vagy csoport szinten).
 */
    [[nodiscard]] int missingQuantity() const noexcept {
        if (context) return context->missingQuantity();
        return std::max(0, pickingQuantity - actualQuantity);
    }

    // T√°rol√≥ UUID lek√©r√©se a StockRegistry-b≈ël
    QUuid storageId() const {
        std::optional<StockEntry> s =
            StockRegistry::instance().findById(stockEntryId);
        if(!s.has_value()) return QUuid();
        return s.value().storageId;
    }

    // Sz√∂veges st√°tusz (UI-hoz)
    QString status() const {
        // üîπ Ha a felhaszn√°l√≥ audit√°ltnak jel√∂lte (pipa)
        if (isRowAuditChecked) {
            if (actualQuantity > 0)
                return "Audit√°lt, OK";
            else
                return "Audit√°lt, nincs k√©szlet";
        }

        // Hull√≥ audit eset√©n k√ºl√∂n logika
        if (sourceType == AuditSourceType::Leftover) {
            if (isInOptimization) {
                if (actualQuantity > 0)
                    return "Felhaszn√°l√°s alatt, OK";
                else
                    return "Felhaszn√°l√°s alatt, nincs meger≈ës√≠tve";
            } else {
                return "Regisztr√°lt hull√≥"; // nincs elv√°rt ‚Üí semleges st√°tusz
            }
        }

        // Stock audit eset√©n
        if (pickingQuantity == 0) {
            // nincs elv√°rt mennyis√©g ‚Üí nincs viszony√≠t√°si alap
            return "Regisztr√°lt k√©szlet";
        }

        // Ha van elv√°rt mennyis√©g, akkor audit st√°tusz √©rtelmezhet≈ë
        switch (rowPresence) {
        case AuditPresence::Present:
            return "OK";
        case AuditPresence::Missing:
            return QString("Hi√°nyz√≥ mennyis√©g: %1").arg(missingQuantity());
        case AuditPresence::Unknown:
            return "Ellen≈ërz√©sre v√°r";
        }
        return "-";
    }

    // Audit st√°tusz t√≠pus (ikonhoz, sz√≠nez√©shez)
    // AuditStatus statusType() const {
    //     // Ha nem r√©sze az optimaliz√°ci√≥nak ‚Üí csak inform√°ci√≥
    //     if (!isInOptimization) {
    //         return AuditStatus::Info;
    //     }

    //     // Ha nincs context, fallback a lok√°lis mez≈ëkre
    //     if (!context) {
    //         if (pickingQuantity == 0 && actualQuantity > 0)
    //             return AuditStatus::Info;
    //         if (pickingQuantity == 0)
    //             return AuditStatus::Info;
    //         if (actualQuantity == 0)
    //             return AuditStatus::Missing;
    //         if (actualQuantity < pickingQuantity)
    //             return AuditStatus::Pending;
    //         if (actualQuantity >= pickingQuantity)
    //             return AuditStatus::Ok;
    //         return AuditStatus::Unknown;
    //     }

    //     // Kontextus szerinti √©rt√©kel√©s (anyag+hely csoport szinten)
    //     const int expected = context->totalExpected;
    //     const int actual   = context->totalActual;

    //     if (expected == 0 && actual > 0) return AuditStatus::Info;
    //     if (expected == 0 && actual == 0) return AuditStatus::Info;
    //     if (actual == 0) return AuditStatus::Missing;
    //     if (actual < expected) return AuditStatus::Pending;
    //     if (actual >= expected) return AuditStatus::Ok;

    //     return AuditStatus::Unknown;
    // }

    // AuditStatus statusType() const {
    //     // üîπ Ha a felhaszn√°l√≥ explicit audit√°lta (pipa), akkor ez az els≈ëdleges
    //     if (isAuditConfirmed) {
    //         if (actualQuantity > 0)
    //             return AuditStatus::Ok;       // Audit√°lt √©s van k√©szlet
    //         else
    //             return AuditStatus::Missing;  // Audit√°lt, de nincs k√©szlet
    //     }

    //     // ha nincs audit meger≈ës√≠tve, akkor az al√°bbi logika j√∂n
    //     // üîπ Leftover audit k√ºl√∂n logika
    //     if (sourceType == AuditSourceType::Leftover && isInOptimization) {
    //         switch (presence) {
    //         case AuditPresence::Present:   return AuditStatus::Ok;
    //         case AuditPresence::Missing:   return AuditStatus::Missing;
    //         case AuditPresence::Unknown:   return AuditStatus::Pending;
    //         }
    //         return AuditStatus::Unknown;
    //     }

    //     // üî∏ Nem optimaliz√°lt ‚Üí csak inform√°ci√≥
    //     if (!isInOptimization) {
    //         return AuditStatus::Info;
    //     }

    //     // üî∏ Lok√°lis fallback
    //     if (!context) {
    //         if (pickingQuantity == 0 && actualQuantity > 0)
    //             return AuditStatus::Info;
    //         if (pickingQuantity == 0)
    //             return AuditStatus::Info;
    //         if (actualQuantity == 0)
    //             return AuditStatus::Missing;
    //         if (actualQuantity < pickingQuantity)
    //             return AuditStatus::Pending;
    //         if (actualQuantity >= pickingQuantity)
    //             return AuditStatus::Ok;
    //         return AuditStatus::Unknown;
    //     }

    //     // üî∏ Kontextus szerinti √©rt√©kel√©s
    //     const int expected = context->totalExpected;
    //     const int actual   = context->totalActual;

    //     if (expected == 0 && actual > 0) return AuditStatus::Info;
    //     if (expected == 0 && actual == 0) return AuditStatus::Info;
    //     if (actual == 0) return AuditStatus::Missing;
    //     if (actual < expected) return AuditStatus::Pending;
    //     if (actual >= expected) return AuditStatus::Ok;

    //     return AuditStatus::Unknown;
    // }


    // // Sz√∂veges st√°tusz (konzisztens a statusType()-pal)
    // QString statusText() const {
    //     // üîπ Ha nincs audit meger≈ës√≠tve ‚Üí mindig "Nem audit√°lt"
    //     if (!isAuditConfirmed) {
    //         return "‚ö™ Nem audit√°lt";
    //     }

    //     // üîπ Ha audit√°lva van, akkor j√∂n a megl√©v≈ë logika
    //     if (sourceType == AuditSourceType::Leftover && isInOptimization) {
    //         QString prefix = "Felhaszn√°l√°s alatt, ";

    //         switch (presence) {
    //         case AuditPresence::Present:
    //             return prefix + "OK";
    //         case AuditPresence::Missing:
    //             return prefix + "Hi√°nyzik";
    //         case AuditPresence::Unknown:
    //             return prefix + "Ellen≈ërz√©sre v√°r";
    //         }
    //         return prefix + "-";
    //     }

    //     return StorageAudit::Status::toText(statusType());
    // }

    // AuditStatus statusType() const {
    //     // üîπ Ha nincs audit meger≈ës√≠tve ‚Üí Nem audit√°lt
    //     if (!isRowAuditChecked) {
    //         return AuditStatus::Unknown; // vagy defini√°lhatsz k√ºl√∂n NotAudited enumot
    //     }

    //     // üîπ Leftover sorok k√ºl√∂n logika
    //     if (sourceType == AuditSourceType::Leftover) {
    //         if (isInOptimization) {
    //             return (actualQuantity > 0) ? AuditStatus::Ok : AuditStatus::Missing;
    //         }
    //         return AuditStatus::Info; // regisztr√°lt hull√≥
    //     }

    //     // üîπ Ha nem r√©sze az optimaliz√°ci√≥nak ‚Üí csak inform√°ci√≥
    //     if (!isInOptimization) {
    //         return AuditStatus::Info;
    //     }

    //     // üîπ Ha nincs context ‚Üí egyedi sor
    //     if (!context) {
    //         if (actualQuantity == 0) return AuditStatus::Missing;
    //         return AuditStatus::Ok; // egyedi sor audit√°lt
    //     }

    //     // üîπ Kontextus szerinti √©rt√©kel√©s (anyagcsoport szinten)
    //     const int expected = context->totalExpected;
    //     const int actual   = context->totalActual;

    //     if (actual == 0) return AuditStatus::Missing;
    //     if (actual < expected) return AuditStatus::Pending; // r√©szlegesen audit√°lt
    //     if (actual >= expected) return AuditStatus::Ok;     // teljesen audit√°lt

    //     return AuditStatus::Unknown;
    // }

    // QString statusText() const {
    //     if (sourceType == AuditSourceType::Leftover) {
    //         if (!isRowAuditChecked) {
    //             return "‚ö™ Nem audit√°lt ‚ôªÔ∏è (hull√≥)";
    //         }

    //         switch (rowPresence) {
    //         case AuditPresence::Present: return "üü¢ Audit√°lt ‚ôªÔ∏è (van)";
    //         case AuditPresence::Missing: return "üü† Audit√°lt ‚ôªÔ∏è (nincs)";
    //         case AuditPresence::Unknown: return "‚ö™ Nem audit√°lt ‚ôªÔ∏è";
    //         }
    //         return "üü¢ Audit√°lt ‚ôªÔ∏è (regisztr√°lt hull√≥)";
    //     }

    //     if (context) {
    //         switch (context->presence()) {
    //         case AuditPresence::Unknown: return "‚ö™ Nem audit√°lt";
    //         case AuditPresence::Missing: return "üü° R√©szlegesen audit√°lt";
    //         case AuditPresence::Present: return "üü¢ Audit√°lva";
    //         }
    //     }

    //     // fallback ha nincs context
    //     return isRowAuditChecked ? "üü¢ Audit√°lva" : "‚ö™ Nem audit√°lt";
    // }



    AuditStatus statusType() const {
        // üîπ Leftover sorok k√ºl√∂n logika
        if (sourceType == AuditSourceType::Leftover) {
            if (isInOptimization) {
                return (actualQuantity > 0) ? AuditStatus::Ok : AuditStatus::Missing;
            }
            return AuditStatus::Info; // regisztr√°lt hull√≥
        }

        // üîπ Ha nincs audit pipa ‚Üí nem audit√°lt
        if (!isRowAuditChecked) {
            return AuditStatus::Unknown; // vagy k√ºl√∂n NotAudited enum
        }

        // üîπ Ha van context √©s a sor t√©nyleg group tag
        if (context && context->group.size() > 1) {
            switch (context->groupPresence()) {
            case AuditPresence::Unknown: return AuditStatus::Unknown;
            case AuditPresence::Missing: return AuditStatus::Pending; // r√©szlegesen audit√°lt
            case AuditPresence::Present: return AuditStatus::Ok;      // teljesen audit√°lt
            }
        }

        // üîπ Ha nincs context ‚Üí egyedi sor logika
        if (actualQuantity == 0) return AuditStatus::Missing;
        return AuditStatus::Ok;
    }

    QString statusText() const {
        // üîπ Leftover sorok k√ºl√∂n logika
        if (sourceType == AuditSourceType::Leftover) {
            if (!isRowAuditChecked) {
                return "‚ö™ Nem audit√°lt ‚ôªÔ∏è (hull√≥)";
            }
            return (actualQuantity > 0)
                       ? "üü¢ Audit√°lt ‚ôªÔ∏è (van)"
                       : "üü† Audit√°lt ‚ôªÔ∏è (nincs)";
        }

        // üîπ Ha van context √©s a sor t√©nyleg group tag
        if (context && context->group.size() > 1) {
            switch (context->groupPresence()) {
            case AuditPresence::Unknown: return "‚ö™ Nem audit√°lt (csoport)";
            case AuditPresence::Missing: return "üü° R√©szlegesen audit√°lt (csoport)";
            case AuditPresence::Present: return "üü¢ Audit√°lva (csoport)";
            }
        }

        // üîπ Ha nincs context ‚Üí egyedi sor logika
        if (isRowAuditChecked) {
            return (actualQuantity > 0)
            ? "üü¢ Audit√°lva"
            : "üü† Audit√°lt, nincs k√©szlet";
        }

        return "‚ö™ Nem audit√°lt";
    }

};

