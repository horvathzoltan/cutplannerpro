#pragma once

#include "model/stockentry.h"
#include <QString>
#include <QUuid>
#include <model/registries/leftoverstockregistry.h>
#include <model/registries/stockregistry.h>
#include "model/storageaudit/audit_enums.h"
#include "model/storageaudit/auditcontext.h"
#include "model/storageaudit/auditstatus.h"
//#include "model/storageaudit/auditstatus_text.h"


struct StorageAuditRow {
    QUuid rowId = QUuid::createUuid(); // Egyedi azonos√≠t√≥ (CRUD m≈±veletekhez is kell)
    QUuid materialId;                  // Anyag azonos√≠t√≥ (UUID)
    QUuid stockEntryId;                // Kapcsolat a StockEntry-hez
    AuditSourceType sourceType = AuditSourceType::Stock;
    //AuditPresence rowPresence = AuditPresence::Unknown;

    int pickingQuantity = 0;       // Elv√°rt mennyis√©g (soronk√©nt, injekt√°l√°s ut√°n)
    //int actualQuantity = 0;        // Audit sor√°n tal√°lt mennyis√©g
    bool isInOptimization = false; // R√©sze-e az optimaliz√°ci√≥nak

    int originalQuantity;
    int actualQuantity;

    bool isRowModified = false; // sor szint≈± M√≥dosult-e az eredeti √©rt√©khez k√©pest
    bool isRowAuditChecked = false; // sor szint≈± pipa √°llapota
    //AuditResult rowAuditResult; // sor szint≈± Audit √°llapot

    bool isAudited() const {
        return isRowModified || isRowAuditChecked;
    }

    bool isFulfilled() const {
        return actualQuantity >= pickingQuantity;
    }

    QString barcode;               // Vonalk√≥d (ha van)
    QString storageName;           // T√°rol√≥ neve
    QUuid rootStorageId; // üÜï G√©pszint≈± csoportos√≠t√°shoz sz√ºks√©ges

    // Kontextus pointer: azonos anyag+hely csoport √∂sszes√≠tett adatai
    std::shared_ptr<AuditContext> context;

    /**
 * @brief Hi√°nyz√≥ mennyis√©g sz√°m√≠t√°sa sor szinten.
 *
 * - Ha van hozz√°rendelt AuditContext, akkor a csoport szint≈± hi√°nyt adja vissza
 *   (deleg√°l a AuditContext::missingQuantity()-ra).
 * - Ha nincs AuditContext, akkor a sor saj√°t pickingQuantity √©s actualQuantity
 *   mez≈ëi alapj√°n sz√°molja a hi√°nyt.
 *
 * @note A hi√°ny sosem lehet negat√≠v. A c√©l az audit teljes√ºl√©s√©nek ellen≈ërz√©se,
 *       nem a t√∂bblet kimutat√°sa.
 *
 * @return int A hi√°nyz√≥ mennyis√©g (sor vagy csoport szinten).
 */
    [[nodiscard]] int missingQuantity() const noexcept {
        if (context) return context->missingQuantity();
        return std::max(0, pickingQuantity - actualQuantity);
    }

    // T√°rol√≥ UUID lek√©r√©se a StockRegistry-b≈ël
    QUuid storageId() const {
        std::optional<StockEntry> s =
            StockRegistry::instance().findById(stockEntryId);
        if(!s.has_value()) return QUuid();
        return s.value().storageId;
    }


    AuditStatus status() const {
        if (!isAudited()) {
            return (sourceType == AuditSourceType::Leftover)
                       ? AuditStatus(AuditStatus::RegisteredOnly)
                       : AuditStatus(AuditStatus::NotAudited);
        }
        return isFulfilled()
                   ? AuditStatus(AuditStatus::Audited_Fulfilled)
                   : AuditStatus(AuditStatus::Audited_Missing);
    }


    AuditStatus statusType() const {
        // üîπ Hull√≥ sor ‚Äì mindig saj√°t st√°tusz alapj√°n
        if (sourceType == AuditSourceType::Leftover) {
            return status();//AuditStatus::fromRow(isAudited(), isFulfilled(), true);
        }

        // üîπ Egyedi sor ‚Äì nincs csoport vagy csak 1 elem
        if (!context || context->group.size() <= 1) {
            return status();//AuditStatus::fromRow(isAudited(), isFulfilled());
        }

        // üîπ Csoportos sor ‚Äì a csoport audit√°lts√°ga sz√°m√≠t
        return context->status();//AuditStatus::fromGroup(*context);
    }

    QString suffixForRow() const {
        if (sourceType == AuditSourceType::Leftover)
            return isAudited() ? (isFulfilled() ? AuditStatus::suffix_HulloVan() : AuditStatus::suffix_HulloNincs())
                               : AuditStatus::suffix_HulloNemAudit();

        if (!context || context->group.size() <= 1) {
            if (isRowModified)
                return isFulfilled() ? AuditStatus::suffix_Modositva() : AuditStatus::suffix_ModositvaNincs();
            if (isRowAuditChecked && !isFulfilled())
                return AuditStatus::suffix_NincsKeszlet();
        }

        return QString(); // nincs suffix
    }

    QString statusText() const {
        const AuditStatus s = statusType();
        const QString suffix = suffixForRow();
        return suffix.isEmpty() ? s.toDecoratedText() : AuditStatus::withSuffix(s.get(), suffix);
    }


    // QString statusText() const {
    //     const AuditStatus s = statusType();

    //     // üîπ Leftover sorok
    //     if (sourceType == AuditSourceType::Leftover) {
    //         if (!isAudited()) {
    //             return AuditStatus::withSuffix(s.get(), AuditStatus::suffix_HulloNemAudit());
    //         }
    //         return isFulfilled()
    //                    ? AuditStatus::withSuffix(s.get(), AuditStatus::suffix_HulloVan())
    //                    : AuditStatus::withSuffix(s.get(), AuditStatus::suffix_HulloNincs());
    //     }

    //     // üîπ Egyedi sor
    //     if (!context || context->group.size() <= 1) {
    //         if (isRowModified) {
    //             return isFulfilled()
    //                 ? AuditStatus::withSuffix(s.get(), AuditStatus::suffix_Modositva())
    //                 : AuditStatus::withSuffix(s.get(), AuditStatus::suffix_ModositvaNincs());
    //         }

    //         if (isRowAuditChecked) {
    //             return isFulfilled()
    //             ? s.toDecoratedText()
    //                        : AuditStatus::withSuffix(s.get(), AuditStatus::suffix_NincsKeszlet());
    //         }

    //         return s.toDecoratedText();
    //     }

    //     // üîπ Csoportos sor
    //     return context->statusText();
    // }


};

