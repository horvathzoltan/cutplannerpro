#pragma once

#include "model/stockentry.h"
#include <QString>
#include <QUuid>
#include <model/registries/leftoverstockregistry.h>
#include <model/registries/stockregistry.h>
#include "model/storageaudit/auditcontext.h"
#include "model/storageaudit/auditstatus.h"
#include "model/storageaudit/auditstatus_text.h"

enum class AuditSourceType {
    Stock,
    Leftover
};

enum class AuditPresence {
    Unknown,
    Present,
    Missing
};


struct StorageAuditRow {
    QUuid rowId = QUuid::createUuid(); // CRUD miatt kell egy azonos√≠t√≥
    QUuid materialId; // vagy barcode, amit a MaterialRegistry tud kezelni
    QUuid stockEntryId;                    // üîó Kapcsolat a StockEntry-hez
    AuditSourceType sourceType = AuditSourceType::Stock;    
    AuditPresence presence = AuditPresence::Unknown;

    int pickingQuantity = 0;       // Elv√°rt mennyis√©g (picking alapj√°n)
    int actualQuantity = 0;        // Audit sor√°n tal√°lt mennyis√©g
    //bool isPresent = false;
    bool isInOptimization = false;

    QString barcode;
    QString storageName;

    // √∫j: kontextus pointer
    std::shared_ptr<AuditContext> context;

    // int missingQuantity() const {
    //     if(pickingQuantity==0) return 0; // ha nincs picking quantity, nincs elv√°rt quantity sem
    //     if(pickingQuantity < actualQuantity) return 0; // ha t√∂bb van ott,mint kell, nincs hi√°ny

    //     return pickingQuantity - actualQuantity; // hi√°nyz√≥
    // }
    int missingQuantity() const {
        return (pickingQuantity > actualQuantity) ? (pickingQuantity - actualQuantity) : 0;
    }

    QUuid storageId() const {
        std::optional<StockEntry> s =
            StockRegistry::instance().findById(stockEntryId);
        if(!s.has_value()) return QUuid();

        return s.value().storageId;
    }

    // QString storageName() const {
    //     if (sourceType == AuditSourceType::Leftover) {
    //         const std::optional<LeftoverStockEntry> entry =
    //             LeftoverStockRegistry::instance().findById(stockEntryId);
    //         return entry ? entry->storageName() : "‚Äî";
    //     }

    //     const auto stock = StockRegistry::instance().findById(stockEntryId);
    //     return stock ? stock->storageName() : "‚Äî";
    // }

    // QString status() const {
    //     if (sourceType == AuditSourceType::Leftover) {
    //         if (actualQuantity == 0) {
    //             if (isInOptimization)
    //                 return "Felhaszn√°l√°s alatt, nincs meger≈ës√≠tve";
    //             else
    //                 return "Ellen≈ërz√©sre v√°r";
    //         } else {
    //             return "OK";
    //         }
    //     }

    //     switch (presence) {
    //     case AuditPresence::Present: return "OK";
    //     case AuditPresence::Missing: return "Hi√°nyzik";
    //     case AuditPresence::Unknown: return "Ellen≈ërz√©sre v√°r";
    //     }
    //     return "-";
    // }

    QString status() const {
        // üîç Hull√≥ audit eset√©n
        if (sourceType == AuditSourceType::Leftover) {
            if (isInOptimization) {
                if (actualQuantity > 0)
                    return "Felhaszn√°l√°s alatt, OK";
                else
                    return "Felhaszn√°l√°s alatt, nincs meger≈ës√≠tve";
            } else {
                return "Regisztr√°lt hull√≥"; // nincs elv√°rt ‚Üí semleges st√°tusz
            }
        }

        // üì¶ Stock audit eset√©n
        if (pickingQuantity == 0) {
            // nincs elv√°rt mennyis√©g ‚Üí nincs viszony√≠t√°si alap
            return "Regisztr√°lt k√©szlet"; // semleges st√°tusz
        }

        // üéØ Ha van elv√°rt mennyis√©g, akkor audit st√°tusz √©rtelmezhet≈ë
        switch (presence) {
        case AuditPresence::Present:
            return "OK";
        case AuditPresence::Missing:
            return QString("Hi√°nyz√≥ mennyis√©g: %1").arg(pickingQuantity - actualQuantity);
        case AuditPresence::Unknown:
            return "Ellen≈ërz√©sre v√°r";
        }

        return "-";
    }

    AuditStatus statusType() const {
        // Optimize kapu: csak optimize ut√°n ‚Äûer≈ës‚Äù st√°tuszok √©rv√©nyesek
        if (!isInOptimization) {
            // Optimize el≈ëtt nincs elv√°r√°s √©rtelmezve ‚Üí Info
            return AuditStatus::Info;
        }

        // Ha nincs kontextus, √≥vatos default
        if (!context) {
            // Fallback: jelenlegi lok√°lis mez≈ëk alapj√°n
            if (pickingQuantity == 0) return AuditStatus::Info;
            if (actualQuantity == 0)  return AuditStatus::Missing;
            if (actualQuantity > 0 && actualQuantity < pickingQuantity) return AuditStatus::Pending;
            return AuditStatus::Ok;
        }

        // Kontextus szerinti √©rt√©kel√©s (anyag+hely csoport)
        if (context->totalExpected == 0) {
            return AuditStatus::Info;
        }
        if (context->totalActual == 0) {
            return AuditStatus::Missing;
        }
        if (context->totalActual < context->totalExpected) {
            return AuditStatus::Pending;
        }
        return AuditStatus::Ok;
    }

    QString statusText() const {
        // Ha szeretn√©d, a leftover saj√°t sz√∂vegeit finom√≠thatod itt:
        if (sourceType == AuditSourceType::Leftover && isInOptimization) {
            if (actualQuantity > 0) return "Felhaszn√°l√°s alatt, OK";
            // R√©szben leftover kontextusn√°l is mehet a standard:
            // else ‚Üí esni fog a Pending feliratra alul
        }

        return StorageAudit::Status::toText(statusType());
    }


};
