#pragma once
#include <QVector>
#include <numeric>
#include <model/registries/materialregistry.h>
#include "model/cutting/piece/piecewithmaterial.h"
#include "model/cutting/plan/cutplan.h"
#include "service/cutting/optimizer/optimizerconstants.h"
#include "model/cutting/cuttingmachine.h"

namespace OptimizerUtils {
                                                          // Darabhosszak √∂sszege
inline int sumLengths(const QVector<Cutting::Piece::PieceWithMaterial>& combo) {
    return std::accumulate(combo.begin(), combo.end(), 0,
                           [](int sum, const auto& pwm) { return sum + pwm.info.length_mm; });
}

// Kerf vesztes√©g sz√°m√≠t√°sa (darabsz√°m √ó kerf, kerek√≠tve)
inline int roundKerfLoss(int pieceCount, double kerf_mm) {
    return static_cast<int>(std::lround(pieceCount * kerf_mm));
}

// Hullad√©k sz√°m√≠t√°sa (negat√≠v √©rt√©k ne legyen)
inline int computeWasteInt(int selectedLength_mm, int used_mm) {
    const int w = selectedLength_mm - used_mm;
    return w < 0 ? 0 : w;
}

/**
 * @brief Kombin√°ci√≥s pontsz√°m sz√°m√≠t√°sa.
 *
 * A f√ºggv√©ny c√©lja, hogy √∂sszehasonl√≠that√≥v√° tegye a k√ºl√∂nb√∂z≈ë v√°g√°si lehet≈ës√©geket,
 * √©s kiv√°lassza k√∂z√ºl√ºk a legjobbat. A magasabb pontsz√°m a kedvez≈ëbb megold√°st jelzi.
 *
 * Szempontok:
 * - Darabsz√°m: minden kiv√°gott darab +100 pont.
 * - Hullad√©k: a keletkez≈ë hullad√©k hossza levon√°sra ker√ºl.
 * - Teljes elfogyaszt√°s: ha waste == 0, akkor +800 b√≥nusz.
 * - Pontos egy darabos illeszked√©s: ha leftover == 0 √©s pieceCount == 1, tov√°bbi +200 b√≥nusz.
 * - J√≥ leftover: ha leftover a GOOD_LEFTOVER_MIN √©s GOOD_LEFTOVER_MAX k√∂z√© esik, +300 b√≥nusz.
 * - Selejt leftover: ha 0 < leftover < SELEJT_THRESHOLD, akkor ‚àí300 b√ºntet√©s.
 * - T√∫l nagy leftover: ha leftover > GOOD_LEFTOVER_MAX, akkor dinamikus b√ºntet√©s
 *   (‚àí100 alap + m√©rettel ar√°nyos levon√°s).
 *
 * @param pieceCount     A kiv√°gott darabok sz√°ma.
 * @param waste          A v√°g√°s ut√°n keletkez≈ë hullad√©k hossza (mm).
 * @param leftoverLength A r√∫d fennmarad√≥ hossza (mm).
 * @return int           A kombin√°ci√≥ pontsz√°ma; min√©l nagyobb, ann√°l jobb.
 *
 * @note A pontoz√°s nem puszt√°n matematikai hat√©konys√°got t√ºkr√∂z,
 *       hanem a m≈±helypszichol√≥gi√°t is: prefer√°lja a teljesen elfogyasztott rudakat
 *       √©s a j√≥l haszn√°lhat√≥ marad√©kokat, mik√∂zben b√ºnteti a bosszant√≥an kicsi
 *       vagy a t√∫l nagy, kihaszn√°latlan marad√©kokat.
 */

inline int calcScore(int pieceCount, int waste, int leftoverLength) {
    int score = 0;

    // üéØ Alap: darabsz√°m prefer√°l√°sa
    score += pieceCount * 100;

    // üßπ Hullad√©k levon√°sa
    score -= waste;

    // ü•á Teljes elfogyaszt√°s ‚Äì pszichol√≥giai b√≥nusz
    if (waste == 0) {
        score += 800;
    }

    // üéØ Pontos egy darabos illeszked√©s ‚Äì k√ºl√∂n jutalom
    if (leftoverLength == 0 && pieceCount == 1) {
        score += 200;
    }

    // üòä J√≥ leftover tartom√°ny ‚Äì ‚Äûj√≥ √©rz√©s≈±‚Äù marad√©k
    if (leftoverLength >= OptimizerConstants::GOOD_LEFTOVER_MIN &&
        leftoverLength <= OptimizerConstants::GOOD_LEFTOVER_MAX) {
        score += 300;
    }

    // üò¨ Selejt leftover ‚Äì er≈ësebb b√ºntet√©s
    if (leftoverLength > 0 && leftoverLength < OptimizerConstants::SELEJT_THRESHOLD) {
        score -= 300; // vissza√°ll√≠tva az eredeti szigorra
    }

    // üß± T√∫l nagy leftover ‚Äì dinamikus b√ºntet√©s
    if (leftoverLength > OptimizerConstants::GOOD_LEFTOVER_MAX) {
        // Alapb√ºntet√©s ‚àí100, de sk√°l√°zva a m√©rettel
        int oversize = leftoverLength - OptimizerConstants::GOOD_LEFTOVER_MAX;
        score -= 100 + oversize / 100;
        // pl. 900 mm leftover ‚Üí ‚àí110, 1500 mm leftover ‚Üí ‚àí1150
    }

    return score;
}



/**
 * @brief Megkeresi azt az egyetlen darabot, amelyik a legjobban illeszkedik a marad√©k hosszba.
 *
 * A pontoz√°s a calcScore() alapj√°n t√∂rt√©nik, teh√°t prefer√°lja a teljes elfogyaszt√°st
 * √©s a j√≥ leftover m√©reteket. Ha nincs olyan darab, ami belef√©rne, std::nullopt‚Äëot ad vissza.
 *
 * @param available     Az el√©rhet≈ë darabok list√°ja.
 * @param lengthLimit   A r√∫d marad√©k hossza.
 * @param kerf_mm       A v√°g√°si vesztes√©g (mm).
 * @return std::optional<Cutting::Piece::PieceWithMaterial>
 */
inline std::optional<Cutting::Piece::PieceWithMaterial>
findSingleBestPiece(const QVector<Cutting::Piece::PieceWithMaterial>& available,
                    int lengthLimit,
                    double kerf_mm)
{
    std::optional<Cutting::Piece::PieceWithMaterial> best;
    int bestScore = std::numeric_limits<int>::min();

    for (const auto& piece : available) {
        int used = piece.info.length_mm + OptimizerUtils::roundKerfLoss(1, kerf_mm);
        if (used > lengthLimit) continue;

        int waste = OptimizerUtils::computeWasteInt(lengthLimit, used);
        int leftoverLength = lengthLimit - used;
        int score = OptimizerUtils::calcScore(1, waste, leftoverLength);

        if (score > bestScore) {
            bestScore = score;
            best = piece;
        }
    }
    return best;
}

/**
 * @brief Megkeresi azt az egyetlen darabot, amelyik pontosan elfogyasztja a megadott hosszt.
 *
 * Ha tal√°lunk olyan darabot, amelyik + kerf pontosan kit√∂lti a r√∫d hossz√°t (waste == 0),
 * akkor azt visszaadjuk. Ellenkez≈ë esetben std::nullopt.
 *
 * @param available     Az el√©rhet≈ë darabok list√°ja.
 * @param lengthLimit   A r√∫d teljes hossza.
 * @param kerf_mm       A v√°g√°si vesztes√©g (mm).
 * @return std::optional<Cutting::Piece::PieceWithMaterial>
 */
inline std::optional<Cutting::Piece::PieceWithMaterial>
findSingleExactFit(const QVector<Cutting::Piece::PieceWithMaterial>& available,
                   int lengthLimit,
                   double kerf_mm)
{
    for (const auto& piece : available) {
        int used = piece.info.length_mm + OptimizerUtils::roundKerfLoss(1, kerf_mm);
        if (used == lengthLimit) {
            return piece; // pontos illeszked√©s
        }
    }
    return std::nullopt;
}

inline QString formatCutPlanEvent(const Cutting::Plan::CutPlan& plan,
                                  const CuttingMachine& machine) {
    // Forr√°s azonos√≠t√≥
    QString sourceLabel;
    if (plan.source == Cutting::Plan::Source::Reusable) {
        sourceLabel = QString("Hull√≥: %1").arg(plan.sourceBarcode);
    } else {
        const MaterialMaster* mat = MaterialRegistry::instance().findById(plan.materialId);
        sourceLabel = mat ? QString("Anyag: %1").arg(mat->name)
                          : QString("Anyag: ? (%1)").arg(plan.materialId.toString());
    }

    // Darablista
    QMap<int,int> pieceCount; // hossz ‚Üí darabsz√°m
    for (const auto& pw : plan.piecesWithMaterial) {
        pieceCount[pw.info.length_mm] += 1;
    }
    QStringList pieceList;
    for (auto it = pieceCount.begin(); it != pieceCount.end(); ++it) {
        pieceList << QString("%1√ó%2 mm").arg(it.value()).arg(it.key());
    }

    return QString("ü™ö CutPlan #%1 ‚Üí %2, Rod=%3, g√©p=%4, kerf=%5 mm, darabok: %6, hullad√©k=%7 mm")
        .arg(plan.planNumber)
        .arg(sourceLabel)
        .arg(plan.rodId)
        .arg(machine.name)
        .arg(plan.kerfUsed_mm)
        .arg(pieceList.join(", "))
        .arg(plan.waste);
}

} // namespace OptimizerUtils
