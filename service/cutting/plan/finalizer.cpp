#include "finalizer.h"

// üîΩ K√©szletregiszterek
#include "../../../model/registries/stockregistry.h"
#include "../../../model/registries/leftoverstockregistry.h"

// üîΩ Konverzi√≥s logika: CutResult ‚Üí ReusableStockEntry
#include "service/cutting/result/resultutils.h"

// üîΩ Export√°l√≥ modul
#include "service/cutting/result/archivedwasteutils.h"
#include "service/cutting/segment/segmentutils.h"

void CuttingPlanFinalizer::finalize(QVector<Cutting::Plan::CutPlan>& plans,
                                    const QVector<Cutting::Result::ResultModel>& leftovers)
{
    // 1Ô∏è‚É£ A v√°g√°si tervek lez√°r√°sa, √©s az alapanyag ‚Äûfogyaszt√°sa‚Äù k√©szletb≈ël
    for (Cutting::Plan::CutPlan& plan : plans) {
        if (plan.isReusable()) {
            // ‚ôªÔ∏è Ha hull√≥b√≥l v√°gtunk ‚Üí annak elt√°vol√≠t√°sa
            LeftoverStockRegistry::instance().consumeEntry(plan.rodId);
        } else {
            // üß± Ha eredeti profilb√≥l v√°gtunk ‚Üí k√©szlet cs√∂kkent√©se
            StockRegistry::instance().consumeEntry(plan.materialId);
        }

        plan.setStatus(Cutting::Plan::Status::Completed); // ‚úÖ √Ållapot friss√≠t√©se: k√©sz
    }

    // 2Ô∏è‚É£ Hullad√©kok feldolgoz√°sa ‚Üí √∫jrahaszn√°lat vagy archiv√°l√°s
    QVector<ArchivedWasteEntry> archivedBatch;

    for (const Cutting::Result::ResultModel& result : leftovers) {
        if (result.waste >= 300 && !result.reusableBarcode.isEmpty()) {
            // ‚úÖ El√©g hossz√∫ ‚Üí beker√ºl az √∫jrahaszn√°lhat√≥ r√∫dlist√°ba
            LeftoverStockEntry reusable = Cutting::Result::ResultUtils::toReusableEntry(result);
            LeftoverStockRegistry::instance().registerEntry(reusable);
        } else {
            // üóÇÔ∏è R√∂vid ‚Üí archiv√°land√≥ hullad√©kk√©nt t√°roljuk

            // üîç Eredeti CutPlan el≈ëkeres√©se planId alapj√°n
            auto it = std::find_if(plans.begin(), plans.end(), [&](const Cutting::Plan::CutPlan& p) {
                return p.planId == result.cutPlanId;
            });

            // üìú Meg√°llap√≠tjuk, hogy ez val√≥ban v√©gmarad√©k volt-e
            bool trailingWaste = false;
            if (it != plans.end()) {
                trailingWaste = Cutting::Segment::SegmentUtils::isTrailingWaste(result.waste, it->segments);
            }

            // üìù Archiv√°lt selejt fel√©p√≠t√©se
            ArchivedWasteEntry archived;
            archived.materialId        = result.materialId;
            archived.wasteLength_mm    = result.waste;
            archived.sourceDescription = result.sourceAsString(); // pl. ‚ÄûFromStock‚Äù
            archived.createdAt         = QDateTime::currentDateTime();
            archived.group             = QString();               // Nincs csoportoz√°s
            archived.originBarcode     = result.reusableBarcode;
            archived.cutPlanId         = result.cutPlanId;

            archived.isFinalWaste = trailingWaste;

            // üóíÔ∏è Pontos megjegyz√©s gener√°l√°sa
            archived.note = trailingWaste
                                ? "Finalize: v√©gmarad√©k a z√°r√≥ v√°g√°sb√≥l"
                                : "Finalize: t√∫l r√∂vid hull√≥ ‚Üí archiv√°lva";

            archivedBatch.append(archived);
        }
    }

    // 3Ô∏è‚É£ Export√°l√°s CSV f√°jlba, ha t√∂rt√©nt archiv√°l√°s
    if (!archivedBatch.isEmpty()) {
        ArchivedWasteUtils::exportToCSV(archivedBatch);
    }
}

