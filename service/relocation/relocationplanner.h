#pragma once

#include "common/logger.h"
#include "model/cutting/plan/cutplan.h"
#include "model/relocation/relocationinstruction.h"

#include <QMap>

#include <model/registries/storageregistry.h>

namespace RelocationPlanner {


inline QVector<RelocationInstruction> buildPlan(
    const QVector<Cutting::Plan::CutPlan>& cutPlans,
    const QVector<StorageAuditRow>& auditRows)
{
    QVector<RelocationInstruction> plan;

    // 1Ô∏è‚É£ Audit√°latlan sorok figyelmeztet√©se
    const bool hasUnaudited = std::any_of(auditRows.begin(), auditRows.end(),
                                          [](const StorageAuditRow& row) {
                                              return row.wasModified && !row.isAuditConfirmed;
                                          });
    if (hasUnaudited) {
        zWarning("‚ö†Ô∏è Audit√°latlan sorok tal√°lhat√≥k ‚Äì a relocation terv nem teljesen megb√≠zhat√≥!");
    }

    // 2Ô∏è‚É£ CutPlan-ek sz√©tv√°logat√°sa
    QMap<QUuid, int> requiredStockByMaterial;
    QMap<QUuid, QString> materialCodeById;
    QMap<QUuid, QString> materialNameById;
    QVector<const Cutting::Plan::CutPlan*> reusablePlans;

    for (const auto& planItem : cutPlans) {
        if (planItem.source == Cutting::Plan::Source::Stock) {
            requiredStockByMaterial[planItem.materialId] += 1;
            materialCodeById[planItem.materialId] = planItem.materialBarcode();
            materialNameById[planItem.materialId] = planItem.materialName();
        } else if (planItem.source == Cutting::Plan::Source::Reusable) {
            reusablePlans.append(&planItem);
        }
    }

    // 3Ô∏è‚É£ Stock anyagok relocation terve
    for (auto it = requiredStockByMaterial.begin(); it != requiredStockByMaterial.end(); ++it) {
        const QUuid materialId = it.key();
        const int requiredQty = it.value();
        const QString materialCode = materialCodeById.value(materialId);
        const QString materialName = materialNameById.value(materialId);

        // üîç Root t√°rol√≥ meghat√°roz√°sa audit alapj√°n
        // Ez a "g√©pszint≈±" gy√∂k√©r, amely al√° a c√©lhelyek tartoznak.
        QUuid rootId;
        auto rowIt = std::find_if(auditRows.begin(), auditRows.end(),
                                  [&](const StorageAuditRow& r){ return r.materialId == materialId; });
        if (rowIt != auditRows.end())
            rootId = rowIt->rootStorageId;

        // üéØ C√©lhelyek list√°z√°sa (rootId alatti storage-ok)
        const auto targetEntries = StorageRegistry::instance().getRecursive(rootId);
        QVector<RelocationTargetEntry> targetList;
        for (const auto& entry : targetEntries) {
            RelocationTargetEntry tgt;
            tgt.locationId = entry.id;
            tgt.locationName = entry.name;
            tgt.placed = 0;
            targetList.append(tgt);
        }

        // üì¶ Forr√°sok gy≈±jt√©se a StockRegistry-b≈ël
        // Fontos: nem az audit sorokb√≥l, hanem a t√©nyleges k√©szletb≈ël dolgozunk.
        QVector<RelocationSourceEntry> sourceList;
        auto stockEntries = StockRegistry::instance().findByMaterialId(materialId);

        for (const auto& entry : stockEntries) {
            // üö´ Kiz√°rjuk a c√©lhelyeket  (v√°g√≥helyek - ne legyen "forr√°s == c√©l")
            if (StorageRegistry::instance().isDescendantOf(entry.storageId, rootId)) continue;

            RelocationSourceEntry src;
            src.locationId   = entry.storageId;
            src.locationName = StorageRegistry::instance().findById(entry.storageId)->name;
            src.available    = entry.quantity;
            src.moved        = 0;
            sourceList.append(src);
        }

        // üìä Mennyi van m√°r a c√©lhelyen ‚Üí ebb≈ël sz√°moljuk a hi√°nyt
        int presentAtTarget = 0;
        int auditedAtTarget = 0;
        for (const auto& row : auditRows) {
            if (row.sourceType != AuditSourceType::Stock) continue;
            if (row.materialId != materialId) continue;
            if (row.rootStorageId != rootId) continue;

            presentAtTarget += row.actualQuantity;
            if (row.isAuditConfirmed)
                auditedAtTarget += row.actualQuantity;
        }

        // ‚û°Ô∏è Mozgatand√≥ mennyis√©g = ig√©ny ‚Äì ami m√°r ott van
        int toMove = std::max(0, requiredQty - presentAtTarget);

        // üìã RelocationInstruction √©p√≠t√©se (egyedi sor a dial√≥gushoz)
        RelocationInstruction instr(materialName,
                                    toMove,  // üîπ nem a teljes ig√©ny, hanem a hi√°ny
                                    false,
                                    materialCode,
                                    AuditSourceType::Stock,
                                    materialId);
        instr.sources = sourceList;
        instr.targets = targetList;
        //instr.dialogTotalMovedQuantity = 0;
        instr.finalizedQuantity = std::nullopt; // m√©g nincs finalize-olva;
        plan.append(instr);

        // üìä √ñsszes√≠t≈ë sor
        int totalRemaining = 0;
        int auditedRemaining = 0;
        for (const auto& row : auditRows) {
            if (row.materialId != materialId) continue;
            totalRemaining += row.actualQuantity;
            if (row.isAuditConfirmed)
                auditedRemaining += row.actualQuantity;
        }



        int usedFromRemaining = std::min(requiredQty, presentAtTarget);
        int coveredQty = std::min(requiredQty, totalRemaining);
        int uncoveredQty = std::max(0, requiredQty - coveredQty);

        QString status;
        if (uncoveredQty == 0) {
            status = auditedAtTarget < presentAtTarget
                         ? "üü° R√©szlegesen audit√°lt, ‚úî Ig√©ny teljes√≠tve"
                         : "üü¢ Teljesen audit√°lt, ‚úî Ig√©ny teljes√≠tve";
        } else {
            status = QString("üî¥ Nem teljes√≠tett, Lefedetlen: %1").arg(uncoveredQty);
        }

        RelocationInstruction summary(materialName,
                                      requiredQty,
                                      totalRemaining,
                                      auditedRemaining,
                                      0,
                                      uncoveredQty,
                                      coveredQty,
                                      usedFromRemaining,
                                      status,
                                      materialCode,
                                      AuditSourceType::Stock,
                                      materialId);
        plan.append(summary);
    }

    // 4Ô∏è‚É£ Hull√≥k (Reusable)
    for (const auto* planItem : reusablePlans) {
        const QUuid materialId   = planItem->materialId;
        const QString materialName = planItem->materialName();
        const QString rodBarcode   = planItem->rodId;

        auto it = std::find_if(auditRows.begin(), auditRows.end(), [&](const StorageAuditRow& row) {
            return row.isAuditConfirmed &&
                   row.sourceType == AuditSourceType::Leftover &&
                   row.materialId == materialId &&
                   row.barcode == rodBarcode;
        });

        if (it != auditRows.end()) {
            RelocationInstruction instr(materialName,
                                        0,      // nincs ig√©ny darabsz√°m
                                        true,   // jelen van ‚Üí Megvan
                                        rodBarcode,
                                        AuditSourceType::Leftover,
                                        materialId);

            // üì¶ Forr√°s: jelezz√ºk, hogy a hull√≥ a saj√°t hely√©n van
            RelocationSourceEntry src;
            src.locationId   = it->storageId();   // auditRow-b√≥l lek√©rdezve
            src.locationName = it->storageName;   // auditRow-b√≥l
            src.available    = it->actualQuantity;
            src.moved        = 0;                 // nem mozgatjuk
            instr.sources.append(src);

            //instr.dialogTotalMovedQuantity = 0;
            instr.finalizedQuantity = std::nullopt;
            plan.push_back(instr);
        }
    }


    return plan;
}
} // namespace RelocationPlanner
