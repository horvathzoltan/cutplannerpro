#include "auditcontextbuilder.h"
#include "common/logger.h" // zInfo, zWarning
#include <QMap>

/**
 * @brief Egyedi csoportkulcs gener√°l√°sa egy audit sorhoz.
 *
 * - Stock sorok eset√©n: a kulcs = materialId + rootStorageId.
 *   Ez biztos√≠tja, hogy az azonos anyagok ugyanazon g√©phez tartoz√≥ k√©szletei
 *   k√∂z√∂s contextbe ker√ºljenek, √©s aggreg√°ltan sz√°mol√≥djon az elv√°rt mennyis√©g.
 *
 * - Leftover sorok eset√©n: a kulcs = rowId.
 *   √çgy minden leftover p√©ld√°ny k√ºl√∂n contextet kap, nem aggreg√°l√≥dik materialId szerint,
 *   √©s nem keveredik a stock sorokkal.
 *
 * @param r Az audit sor, amelyhez a kulcsot k√©pezz√ºk.
 * @return QString A csoportos√≠t√°si kulcs.
 */
QString AuditContextBuilder::makeGroupKey(const StorageAuditRow& r) {
    if (r.sourceType == AuditSourceType::Leftover)
        return r.rowId.toString(); // hull√≥k ne csoportosuljanak

    return QString("%1|%2").arg(r.materialId.toString(), r.rootStorageId.toString());
}

/**
 * @brief AuditContext objektumok √©p√≠t√©se az audit sorokb√≥l.
 *
 * Feladata:
 * - A sorokat csoportos√≠tja a makeGroupKey() alapj√°n.
 *   - Stock sorok: materialId + rootStorageId szerint.
 *   - Leftover sorok: mindig saj√°t rowId szerint, √≠gy √∂n√°ll√≥ contextet kapnak.
 *
 * - Minden csoporthoz l√©trehoz egy AuditContext-et, amely tartalmazza:
 *   - totalExpected:
 *       * Stock eset√©n ‚Üí a pickingMap (requiredStockMaterials) alapj√°n sz√°molt darabsz√°m.
 *       * Leftover eset√©n ‚Üí bin√°ris √©rt√©k (0/1), att√≥l f√ºgg≈ëen, hogy a sor isInOptimization=true-e.
 *   - totalActual: a t√©nyleges k√©szletmennyis√©g (stockn√°l rakt√°ri darabsz√°m, leftovern√©l mindig 1).
 *   - group: a csoporthoz tartoz√≥ sorok azonos√≠t√≥i.
 *
 * - A visszat√©r√©si √©rt√©k egy map (rowId ‚Üí AuditContext pointer), amely minden sorhoz
 *   hozz√°rendeli a megfelel≈ë contextet.
 *
 * Ez a f√ºggv√©ny biztos√≠tja, hogy a stock sorok aggreg√°ltan, a leftover sorok pedig
 * p√©ld√°ny szinten, √∂n√°ll√≥an jelenjenek meg az auditban.
 *
 * @param rows Az audit sorok list√°ja.
 * @param requiredStockMaterials A pickingMap, amely a stock anyagok elv√°rt darabsz√°m√°t tartalmazza.
 * @return QHash<QUuid, std::shared_ptr<AuditContext>> rowId ‚Üí AuditContext hozz√°rendel√©s.
 */

QHash<QUuid, std::shared_ptr<AuditContext>>
AuditContextBuilder::buildFromRows(const QList<StorageAuditRow>& rows,
                                   const QMap<QUuid,int>& requiredStockMaterials)
{
    // 1Ô∏è‚É£ Csoportos√≠t√°s kulcsra: materialId + rootStorageId
    //    ‚Üí minden anyag+hely kombin√°ci√≥ egy csoportot alkot
    QHash<QString, QList<const StorageAuditRow*>> groups;
    groups.reserve(rows.size());

    for (const auto& r : rows) {
        groups[makeGroupKey(r)].push_back(&r);

        if(_isVerbose){
        // Debug log: minden sor beker√ºl a csoportba
        zInfo(L("[AuditContextBuilder] Row collected | rowId=%1 | matId=%2 | storage=%3 | rootStorage=%4 | picking=%5 | actual=%6")
                  .arg(r.rowId.toString())
                  .arg(r.materialId.toString())
                  .arg(r.storageName)
                  .arg(r.rootStorageId.toString())
                  .arg(r.totalExpected())
                  .arg(r.actualQuantity));
        }
    }

    // 2Ô∏è‚É£ Kontextus l√©trehoz√°s √©s visszacsatol√°s rowId-hoz
    QHash<QUuid, std::shared_ptr<AuditContext>> result;
    result.reserve(rows.size());

    for (auto it = groups.begin(); it != groups.end(); ++it) {
        const QString& key = it.key();
        const auto& grp = it.value();
        if (grp.isEmpty()) continue;

        auto ctx = std::make_shared<AuditContext>(key, grp.first()->materialId);

        ctx->totalExpected = 0;
        ctx->totalActual   = 0;
        if(_isVerbose){
        zInfo(L("[AuditContextBuilder] Building context for groupKey=%1 | rows=%2")
                  .arg(key)
                  .arg(grp.size()));
        }
        // 2/A: t√©nyleges mennyis√©g √∂sszegz√©se √©s sorok hozz√°rendel√©se
        for (const auto* r : grp) {
            ctx->totalActual += r->actualQuantity;
            ctx->group.addRow(r->rowId);

            if(_isVerbose){
            zInfo(L("   adding rowId=%1 | picking=%2 | actual=%3 | runningActual=%4")
                      .arg(r->rowId.toString())
                      .arg(r->totalExpected()) // sor szint≈± jelz≈ë, de nem aggreg√°ljuk
                      .arg(r->actualQuantity)
                      .arg(ctx->totalActual));
            }
        }

        // 2/B: elv√°rt mennyis√©g be√°ll√≠t√°sa anyagcsoport szinten a planb≈ël
        //ctx->totalExpected = requiredStockMaterials.value(grp.first()->materialId, 0);

        // ctx->totalExpected = 0;
        // for (const auto* r : grp) {
        //     ctx->totalExpected = std::max(ctx->totalExpected,
        //                                   requiredStockMaterials.value(r->materialId, 0));
        // }

        // 2/B: elv√°rt mennyis√©g be√°ll√≠t√°sa anyagcsoport szinten a planb≈ël
        // 2/B: elv√°rt mennyis√©g be√°ll√≠t√°sa forr√°st√≠pus szerint
        if (grp.first()->sourceType == AuditSourceType::Stock) {
            ctx->totalExpected = requiredStockMaterials.value(grp.first()->materialId, 0);
        } else if (grp.first()->sourceType == AuditSourceType::Leftover) {
            ctx->totalExpected = 0;
            for (const auto* r : grp) {
                if (r->isInOptimization) {
                    ctx->totalExpected = 1;
                    break;
                }
            }
        } else {
            ctx->totalExpected = 0;
        }


        if(_isVerbose){
        zInfo(L("   >> Context ready: expected=%1 | actual=%2 | rows=%3")
                  .arg(ctx->totalExpected)
                  .arg(ctx->totalActual)
                  .arg(ctx->group.size()));
        }

        // 3Ô∏è‚É£ Minden sorhoz hozz√°rendelj√ºk a k√∂z√∂s context pointert
        for (const auto* r : grp) {
            result.insert(r->rowId, ctx);
        }
    }


    // ‚úÖ √ñsszegz√©s
    zInfo(L("üìä AuditContextBuilder k√©sz: %1 csoport, %2 sor")
              .arg(groups.size())
              .arg(rows.size()));

    return result;
}

