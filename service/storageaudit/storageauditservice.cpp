#include "storageauditservice.h"
#include "model/registries/cuttingmachineregistry.h"
#include "model/registries/storageregistry.h"
#include "model/registries/stockregistry.h"
#include "common/logger.h"
#include "model/storageaudit/storageauditrow.h"

#include <QMultiMap>

//StorageAuditService::AuditMode StorageAuditService::_mode = AuditMode::Passive;

StorageAuditService::StorageAuditService(QObject* parent)
    : QObject(parent) {}

/**
 * @brief Teljes stock audit sorok legener√°l√°sa minden v√°g√≥g√©phez.
 *
 * L√©p√©sei:
 * - Lek√©ri az √∂sszes regisztr√°lt v√°g√≥g√©pet a CuttingMachineRegistry-b≈ël.
 * - Minden g√©phez megh√≠vja az auditMachineStorage() f√ºggv√©nyt,
 *   amely kigy≈±jti a rootStorage √©s az alatta l√©v≈ë t√°rol√≥k stock bejegyz√©seit.
 * - Minden stock bejegyz√©sb≈ël StorageAuditRow k√©sz√ºl, forr√°s t√≠pusa: Stock.
 *
 * Eredm√©ny:
 * - Egy vektor, amely tartalmazza az √∂sszes stock audit sort,
 *   g√©penk√©nt √©s t√°rol√≥nk√©nt kigy≈±jtve.
 *
 * Fontos:
 * - Ezek a sorok anyag szinten aggreg√°l√≥dnak majd a context √©p√≠t√©sn√©l.
 * - Az expected √©rt√©k√ºk a pickingMap alapj√°n ker√ºl kisz√°m√≠t√°sra,
 *   nem itt a gener√°l√°sn√°l.
 *
 * @return QVector<StorageAuditRow> Az √∂sszes stock audit sor.
 */

QVector<StorageAuditRow> StorageAuditService::generateAuditRows_All()
{
    QVector<StorageAuditRow> result;

    const auto& machines = CuttingMachineRegistry::instance().readAll();
    zInfo(L("üîç Teljes audit futtat√°sa minden g√©pre ‚Äî g√©pek sz√°ma: %1").arg(machines.size()));

    for (const auto& machine : machines) {
        zInfo(L("üì¶ Audit√°l√°s g√©phez: %1, rootStorageId: %2")
                  .arg(machine.name)
                  .arg(machine.rootStorageId.toString()));

        auto machineEntries = auditMachineStorage(machine); // minden anyag

        zInfo(L("üìã Audit bejegyz√©sek sz√°ma g√©phez [%1]: %2")
                  .arg(machine.name)
                  .arg(machineEntries.size()));

        result += machineEntries;
    }

    zInfo(L("‚úÖ √ñsszes audit bejegyz√©s (stock): %1").arg(result.size()));
    return result;
}

QVector<StorageAuditRow> StorageAuditService::auditMachineStorage(const CuttingMachine& machine)
{
    QVector<StorageAuditRow> rows;

    const auto& storageEntries = StorageRegistry::instance().findByParentId(machine.rootStorageId);
    zInfo(L("T√°rol√≥k sz√°ma g√©phez [%1]: %2").arg(machine.name).arg(storageEntries.size()));

    const auto& stockEntries = StockRegistry::instance().readAll();
    zInfo(L("√ñsszes k√©szletbejegyz√©s: %1").arg(stockEntries.size()));


    for (const auto& storage : storageEntries) {
        zInfo(L("T√°rol√≥ [%1] ID: %2").arg(storage.name).arg(storage.id.toString()));
    }

    for (const auto& stock : stockEntries) {
        zInfo(L("K√©szlet [%1] storageId: %2").arg(stock.materialName()).arg(stock.storageId.toString()));
    }

    QMultiMap<QUuid, StockEntry> stockByStorage;
    for (const auto& stock : StockRegistry::instance().readAll()) {
        stockByStorage.insert(stock.storageId, stock);
    }

    // t√°rol√≥ gy√∂k√©relem tartalm√°nak a kigy≈±jt√©se
    const auto rootStocks = stockByStorage.values(machine.rootStorageId);
    for (const auto& stock : rootStocks) {
        rows.append(createAuditRow(stock, machine.rootStorageId));

        zInfo(L("Tal√°lt k√©szlet [%1], mennyis√©g: %2")
                  .arg(stock.materialName())
                  .arg(stock.quantity));
    }

    // t√°rol√≥ gy√∂k√©relem alatti t√°rol√≥k tartalm√°nak a kigy≈±jt√©se
    for (const auto& storage : storageEntries) {
        const auto stocks = stockByStorage.values(storage.id);
        for (const auto& stock : stocks) {
            rows.append(createAuditRow(stock, machine.rootStorageId));

            zInfo(L("Tal√°lt k√©szlet [%1] a t√°rol√≥ban [%2], mennyis√©g: %3")
                                   .arg(stock.materialName())
                                   .arg(storage.name)
                                   .arg(stock.quantity));
        }
    }

    return rows;
}

StorageAuditRow StorageAuditService::createAuditRow(
    const StockEntry& stock,
    const QUuid& rootStorageId)
{

    if (stock.materialName().isEmpty() && stock.quantity == 0)
        return {}; // vagy dobj vissza egy optional/null bejegyz√©st


    StorageAuditRow row;
    row.rowId           = QUuid::createUuid();         // egyedi audit sor azonos√≠t√≥
    row.materialId      = stock.materialId;            // Anyag azonos√≠t√≥
    row.stockEntryId    = stock.entryId;               // üîó kapcsolat a StockEntry-hez
    row.sourceType = AuditSourceType::Stock;

    //row.pickingQuantity = 0;//pickingMap.value(stock.materialBarcode(), 0); // vagy materialName alapj√°n
    row.actualQuantity   = stock.quantity;
    row.originalQuantity = stock.quantity;
    //row.rowPresence = AuditPresence::Unknown;         // Felhaszn√°l√≥ fogja be√°ll√≠tani
    row.isInOptimization = false;                  // K√©s≈ëbb valid√°lhat√≥ CutPlan alapj√°n

    row.barcode = stock.materialBarcode();
    row.storageName = stock.storageName();
    row.rootStorageId   = rootStorageId; // üÜï itt √°ll√≠tjuk be

    return row;
}

