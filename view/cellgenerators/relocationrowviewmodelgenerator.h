#pragma once

#include "common/tableutils/colorlogicutils.h"
#include "model/relocation/relocationinstruction.h"
#include "view/columnindexes/relocationplantable_columns.h"
#include "view/viewmodels/tablerowviewmodel.h"
#include "view/viewmodels/tablecellviewmodel.h"
#include "view/cellhelpers/cellfactory.h"

#include <QColor>
#include <QObject>

namespace RelocationRowViewModelGenerator {

// /// üîπ Helper: egyszer≈± sz√∂veges cella l√©trehoz√°sa
// inline TableCellViewModel createTextCell(const QString& text,
//                                          const QString& tooltip = {},
//                                          const QColor& background = Qt::white,
//                                          const QColor& foreground = Qt::black,
//                                          bool isReadOnly = true) {
//     TableCellViewModel cell;
//     cell.text = text;
//     cell.tooltip = tooltip;
//     cell.background = background;
//     cell.foreground = foreground;
//     cell.isReadOnly = isReadOnly;
//     return cell;
// }

/// üîπ Teljes TableRowViewModel gener√°l√°sa egy RelocationInstruction alapj√°n
/// üîπ Teljes TableRowViewModel gener√°l√°sa egy RelocationInstruction alapj√°n
inline TableRowViewModel generate(const RelocationInstruction& instr,
                                  const MaterialMaster* mat,
                                  QObject* /*receiver*/ = nullptr) {
    TableRowViewModel vm;
    // vm.rowId = instr.rowId; // ha k√©s≈ëbb kell egyedi azonos√≠t√≥

    // üé® Alapsz√≠nek a csoport alapj√°n
    QColor baseColor = ColorLogicUtils::resolveBaseColor(mat);
    QColor fgColor   = baseColor.lightness() < 128 ? Qt::white : Qt::black;

    // Anyag
    vm.cells[RelocationPlanTableColumns::Material] =
        CellFactory::textCell(instr.materialName,
                              QString("Anyag: %1").arg(instr.materialName),
                              baseColor, fgColor);

    // Vonalk√≥d
    vm.cells[RelocationPlanTableColumns::Barcode] =
        CellFactory::textCell(instr.barcode,
                              QString("Vonalk√≥d: %1").arg(instr.barcode),
                              baseColor, fgColor);

    // Mennyis√©g / st√°tusz
    QString qtyText = instr.isSatisfied
                          ? QStringLiteral("‚úî Megvan")
                          : QString::number(instr.plannedQuantity);

    QColor qtyColor = instr.isSatisfied
                          ? QColor("#228B22")   // z√∂ld, ha teljes√ºlt
                          : (instr.plannedQuantity == 0
                                 ? QColor("#B22222") // piros, ha 0
                                 : fgColor);

    vm.cells[RelocationPlanTableColumns::Quantity] =
        CellFactory::textCell(qtyText,
                              QString("Terv szerinti mennyis√©g: %1").arg(instr.plannedQuantity),
                              baseColor, qtyColor);

    // Forr√°s lista ‚Üí "hely1 (moved/available), hely2 (moved/available)"
    QStringList sourceParts;
    for (const auto& src : instr.sources) {
        sourceParts << QString("%1 (%2/%3)")
        .arg(src.locationName)
            .arg(src.moved)
            .arg(src.available);
    }
    QString sourceText = sourceParts.isEmpty() ? "‚Äî" : sourceParts.join(", ");

    vm.cells[RelocationPlanTableColumns::Source] =
        CellFactory::textCell(sourceText,
                              QString("Forr√°s t√°rhelyek: %1").arg(sourceText),
                              baseColor, fgColor);

    // C√©l lista ‚Üí "hely1 (placed), hely2 (placed)"
    QStringList targetParts;
    for (const auto& tgt : instr.targets) {
        targetParts << QString("%1 (%2)")
        .arg(tgt.locationName)
            .arg(tgt.placed);
    }
    QString targetText = targetParts.isEmpty() ? "‚Äî" : targetParts.join(", ");

    vm.cells[RelocationPlanTableColumns::Target] =
        CellFactory::textCell(targetText,
                              QString("C√©l t√°rhelyek: %1").arg(targetText),
                              baseColor, fgColor);

    // T√≠pus
    QString typeText = (instr.sourceType == AuditSourceType::Stock)
                           ? QStringLiteral("üì¶ Stock")
                           : QStringLiteral("‚ôªÔ∏è Hull√≥");

    vm.cells[RelocationPlanTableColumns::Type] =
        CellFactory::textCell(typeText,
                              QString("Forr√°s t√≠pusa: %1").arg(typeText),
                              baseColor, fgColor);

    return vm;
}


} // namespace RelocationRowViewModelGenerator
