#pragma once
#include "common/logger.h"
// #include "model/storageaudit/auditcontext.h"
// #include "model/material/materialmaster.h"
#include "model/storageaudit/storageauditrow.h"
#include <QString>

namespace AuditCellText {

inline static bool _isVerbose = false;

/**
 * @brief Elv√°rt mennyis√©g sz√∂veges form√°z√°sa audit sorhoz.
 *
 * Logika:
 * - Hull√≥ audit sor eset√©n: ha optimaliz√°ci√≥ban van √©s van pickingQuantity ‚Üí "1 db", k√ºl√∂nben "‚Äì".
 * - Csoportos√≠tott stock sor eset√©n:
 *    - Ha nincs optimaliz√°ci√≥ ‚Üí "‚Äì (anyagcsoport [c√≠mke])"
 *    - Ha van optimaliz√°ci√≥ ‚Üí "<√∂sszes√≠tett db> (anyagcsoport [c√≠mke])"
 * - Egyedi stock sor eset√©n:
 *    - Ha van optimaliz√°ci√≥ ‚Üí "<lok√°lis db>"
 *    - Ha nincs optimaliz√°ci√≥ ‚Üí "‚Äì"
 *
 * @param row        Audit sor
 * @param groupLabel Csoportc√≠mke (pl. "A", "B", stb.)
 * @return QString   Form√°zott sz√∂veg
 */
inline QString forExpected(const StorageAuditRow& row, const QString& groupLabel = "")
{
    // üß© Hull√≥ audit sor
    if (row.sourceType == AuditSourceType::Leftover) {
        if (row.isInOptimization && row.pickingQuantity > 0)
            return QString("%1 db (hull√≥)").arg(row.pickingQuantity);
        return "‚Äì";
    }

    // üß© Csoportos√≠tott stock sor
    if (row.context && row.context->group.isGroup()) {
        if (!row.isInOptimization) {
            return groupLabel.isEmpty()
            ? "‚Äì (anyagcsoport)"
            : QString("‚Äì (anyagcsoport %1)").arg(groupLabel);
        }
        int expected = row.context->totalExpected;
        return groupLabel.isEmpty()
                   ? QString("%1 db (anyagcsoport)").arg(expected)
                   : QString("%1 db (anyagcsoport %2)").arg(expected).arg(groupLabel);
    }

    // üîπ Egyedi stock sor
    if (row.isInOptimization && row.pickingQuantity > 0)
        return QString("%1 db").arg(row.pickingQuantity);

    return "‚Äì";
}


/**
 * @brief Hi√°nyz√≥ mennyis√©g sz√∂veges form√°z√°sa audit sorhoz.
 *
 * Logika:
 * - Hull√≥ audit sor eset√©n: ha van elv√°r√°s ‚Üí lok√°lis hi√°ny, k√ºl√∂nben "‚Äì".
 * - Csoportos√≠tott stock sor eset√©n: aggreg√°lt hi√°ny, de nem √≠rjuk ki √∫jra a csoportc√≠mk√©t.
 * - Egyedi stock sor eset√©n: lok√°lis hi√°ny.
 * - Ha nincs optimaliz√°ci√≥ ‚Üí "‚Äì".
 */
inline QString forMissing(const StorageAuditRow& row) {
    // üß© Hull√≥ audit sor
    if (row.sourceType == AuditSourceType::Leftover) {
        if (row.isInOptimization && row.pickingQuantity > 0) {
            return QString("%1 db").arg(std::max(0, row.missingQuantity()));
        }
        return "‚Äì";
    }

    // üß© Csoportos√≠tott stock sor
    if (row.context && row.context->group.isGroup()) {
        if (!row.isInOptimization)
            return "‚Äì";
        int missing = std::max(0, row.context->totalExpected - row.context->totalActual);
        return QString("%1 db").arg(missing);
    }

    // üîπ Egyedi stock sor
    return row.isInOptimization
               ? QString("%1 db").arg(std::max(0, row.missingQuantity()))
               : "‚Äì";
}

}
