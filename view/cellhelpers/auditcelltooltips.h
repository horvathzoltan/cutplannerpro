#pragma once
#include "model/storageaudit/storageauditrow.h"
#include "model/material/materialmaster.h"
#include "view/cellhelpers/auditcelltext.h"
#include <QString>

namespace AuditCellTooltips {

// auditcelltooltips.h

inline QString forStatus(const StorageAuditRow& row, const MaterialMaster* mat) {
    QStringList lines;

    // üîë Emberi azonos√≠t√≥k
   // if (!row.rodId.isEmpty())
   //     lines << QString("RodId: %1").arg(row.rodId);
    lines << QString("Barcode: %1").arg(row.barcode.isEmpty() ? "‚Äî" : row.barcode);

    // üì¶ Anyag √©s t√°rol√≥
    if (mat)
        lines << QString("Anyag: %1").arg(mat->name);
    if (!row.storageName.isEmpty())
        lines << QString("T√°rol√≥: %1").arg(row.storageName);

    // üìä Context adatok
    if (row.hasContext()) {
        lines << QString("Auditcsoport: %1 (%2 tag)")
        .arg(row.groupKey())
            .arg(row.groupSize());
        lines << QString("Elv√°rt √∂sszesen: %1").arg(row.totalExpected());
        lines << QString("T√©nyleges √∂sszesen: %1").arg(row.totalActual());
        lines << QString("Hi√°nyz√≥ √∂sszesen: %1").arg(row.missingQuantity());
    }

    // üìã Sor szint≈± adatok
    lines << QString("Elv√°rt (sor): %1").arg(row.totalExpected());
    lines << QString("T√©nyleges (sor): %1").arg(row.actualQuantity);
    lines << QString("Hi√°nyz√≥ (sor): %1").arg(row.missingQuantity());

    // üü¢ St√°tusz (suffixekkel egy√ºtt)
    lines << QString("St√°tusz: %1").arg(row.statusText());

    if (!row.isInOptimization)
        lines << "‚ö†Ô∏è Nem r√©sze az optimaliz√°ci√≥nak";

    return lines.join("\n");
}




inline QString forExpected(const StorageAuditRow& row, const QString& groupLabel = "") {
    return AuditCellText::forExpected(row, groupLabel);
}

inline QString forMissing(const StorageAuditRow& row) {
    return AuditCellText::forMissing(row);
}


} // namespace AuditCellTooltips

// #pragma once
// #include "model/storageaudit/auditcontext.h"
// #include "model/material/materialmaster.h"
// #include "model/storageaudit/storageauditrow.h"
// #include <QString>

// namespace AuditCellTooltips {

// /**
//  * @brief B≈ëv√≠tett tooltip: anyag, t√°rol√≥, sor √©s csoport szint≈± adatok.
//  *        Hasznos cellaszint≈± UI‚Äëhoz, ahol a sor √©s a csoport is l√°tszik.
//  */
// inline QString toTooltip(const AuditContext* ctx,
//                          const MaterialMaster* mat,
//                          const StorageAuditRow* row) {
//     if (!ctx) return {};

//     QStringList parts;

//     // üß© Anyag adatok
//     if (mat) {
//         parts << QString("Anyag: %1").arg(mat->name);
//         if (!mat->barcode.isEmpty())
//             parts << QString("Vonalk√≥d: %1").arg(mat->barcode);
//     }

//     // üì¶ Sor adatok
//     if (row) {
//         if (!row->storageName.isEmpty())
//             parts << QString("T√°rol√≥: %1").arg(row->storageName);
//         parts << QString("Sor t√©nyleges: %1").arg(row->actualQuantity);
//         if (row->isInOptimization)
//             parts << "R√©sze az optimaliz√°ci√≥nak";
//     }

//     // üìä Csoportos√≠tott √©rt√©kek (anyag + rootStorage szinten)
//     parts << QString("Elv√°rt √∂sszesen (anyagcsoport): %1").arg(ctx->totalExpected);
//     parts << QString("Jelen √∂sszesen: %1").arg(ctx->totalActual);
//     parts << QString("Hi√°nyz√≥ √∂sszesen: %1")
//                  .arg(std::max(0, ctx->totalExpected - ctx->totalActual));

//     return parts.join("\n");
// }

// inline QString formatStatusTooltip(const StorageAuditRow& row, const MaterialMaster* mat) {
//     QString tip = toTooltip(row.context.get(), mat, &row);

//     if (row.context && row.context->group.isGroup()) {
//         tip += "\nEz az audit sor egy anyagcsoport tagja ‚Äî a st√°tusz az eg√©sz csoportra vonatkozik.";
//     } else if (!row.isInOptimization) {
//         tip += "\nEz az audit sor nem r√©sze az optimaliz√°ci√≥nak.";
//     }

//     return tip;
// }

// inline QString formatExpectedTooltip(const StorageAuditRow& row) {
//     if (row.sourceType == AuditSourceType::Leftover) {
//         if (row.isInOptimization && row.pickingQuantity > 0)
//             return QString("Elv√°rt mennyis√©g: %1 db\nHull√≥ audit sor ‚Äì optimaliz√°lt").arg(row.pickingQuantity);
//         return "Nincs elv√°rt mennyis√©g ‚Äì hull√≥ audit sor";
//     }

//     if (row.context && row.context->group.isGroup()) {
//         if (!row.isInOptimization)
//             return "Ez az anyag egy auditcsoport tagja, de nem r√©sze az optimaliz√°ci√≥nak.";
//         return QString("Elv√°rt mennyis√©g (anyagcsoport): %1 db").arg(row.context->totalExpected);
//     }

//     return row.isInOptimization
//                ? QString("Elv√°rt mennyis√©g: %1 db").arg(row.pickingQuantity)
//                : "Nincs elv√°rt mennyis√©g ‚Äì nem r√©sze az optimaliz√°ci√≥nak.";
// }

// inline QString formatMissingTooltip(const StorageAuditRow& row) {
//     if (!row.isInOptimization || row.pickingQuantity == 0)
//         return "Nincs hi√°nyz√≥ mennyis√©g ‚Äî nincs elv√°rt.";

//     if (row.context && row.context->group.isGroup()) {
//         int missing = std::max(0, row.context->totalExpected - row.context->totalActual);
//         return QString("Hi√°nyz√≥ mennyis√©g (anyagcsoport): %1 db").arg(missing);
//     }

//     int missing = std::max(0, row.missingQuantity());
//     return QString("Hi√°nyz√≥ mennyis√©g: %1 db").arg(missing);
// }

// QString tooltipTextForRow(const StorageAuditRow& row)
// {
//     QStringList lines;

//     // üîπ Auditcsoport tags√°g
//     if (row.context) {
//         lines << QString("Auditcsoport: %1 (%2 tag)")
//         .arg(row.context->group.groupKey())
//             .arg(row.context->group.size());
//     } else {
//         lines << "Auditcsoport: nincs hozz√°rendelve";
//     }

//     // ‚úÇÔ∏è Optimaliz√°ci√≥s tags√°g
//     if (row.isInOptimization) {
//         lines << "Optimaliz√°ci√≥: r√©sze a v√°g√°si tervnek";
//     } else {
//         lines << "Optimaliz√°ci√≥: nem r√©sze a v√°g√°si tervnek";
//     }

//     // üì¶ Elv√°rt √©s t√©nyleges mennyis√©g
//     lines << QString("Elv√°rt: %1 db").arg(row.pickingQuantity);
//     lines << QString("T√©nyleges: %1 db").arg(row.actualQuantity);

//     // üìâ Hi√°nyz√≥ mennyis√©g (soronk√©nt vagy csoportosan)
//     int missing = row.missingQuantity();
//     lines << QString("Hi√°nyz√≥: %1 db").arg(missing);

//     // üü¢ St√°tusz sz√∂veg (sz√≠nes, suffixes)
//     lines << QString("St√°tusz: %1").arg(row.statusText());

//     return lines.join("\n");
// }

// } // namespace AuditCellTooltips


