#pragma once
#include "model/storageaudit/auditcontext.h"
#include "model/material/materialmaster.h"
#include "model/storageaudit/storageauditrow.h"
#include <QString>

namespace AuditCellTooltips {

/**
 * @brief B≈ëv√≠tett tooltip: anyag, t√°rol√≥, sor √©s csoport szint≈± adatok.
 *        Hasznos cellaszint≈± UI‚Äëhoz, ahol a sor √©s a csoport is l√°tszik.
 */
inline QString toTooltip(const AuditContext* ctx,
                         const MaterialMaster* mat,
                         const StorageAuditRow* row) {
    if (!ctx) return {};

    QStringList parts;

    // üß© Anyag adatok
    if (mat) {
        parts << QString("Anyag: %1").arg(mat->name);
        if (!mat->barcode.isEmpty())
            parts << QString("Vonalk√≥d: %1").arg(mat->barcode);
    }

    // üì¶ Sor adatok
    if (row) {
        if (!row->storageName.isEmpty())
            parts << QString("T√°rol√≥: %1").arg(row->storageName);
        parts << QString("Sor t√©nyleges: %1").arg(row->actualQuantity);
        if (row->isInOptimization)
            parts << "R√©sze az optimaliz√°ci√≥nak";
    }

    // üìä Csoportos√≠tott √©rt√©kek (anyag + rootStorage szinten)
    parts << QString("Elv√°rt √∂sszesen (anyagcsoport): %1").arg(ctx->totalExpected);
    parts << QString("Jelen √∂sszesen: %1").arg(ctx->totalActual);
    parts << QString("Hi√°nyz√≥ √∂sszesen: %1")
                 .arg(std::max(0, ctx->totalExpected - ctx->totalActual));

    return parts.join("\n");
}

// inline QString formatStatusTooltip(const StorageAuditRow& row, const MaterialMaster* mat) {
//     if (!row.context)
//         return "Nincs audit kontextus.";

//     QString tip = toTooltip(row.context.get(), mat, &row);

//     if (row.context->group.isGroup()) {
//         tip += "\nEz az audit sor egy anyagcsoport tagja ‚Äî a st√°tusz az eg√©sz csoportra vonatkozik.";
//     } else if (!row.isInOptimization) {
//         tip += "\nEz az audit sor nem r√©sze az optimaliz√°ci√≥nak.";
//     }

//     return tip;
// }

inline QString formatStatusTooltip(const StorageAuditRow& row, const MaterialMaster* mat) {
    QString tip = toTooltip(row.context.get(), mat, &row);

    if (row.context && row.context->group.isGroup()) {
        tip += "\nEz az audit sor egy anyagcsoport tagja ‚Äî a st√°tusz az eg√©sz csoportra vonatkozik.";
    } else if (!row.isInOptimization) {
        tip += "\nEz az audit sor nem r√©sze az optimaliz√°ci√≥nak.";
    }

    return tip;
}

inline QString formatExpectedTooltip(const StorageAuditRow& row) {
    if (row.sourceType == AuditSourceType::Leftover) {
        if (row.isInOptimization && row.pickingQuantity > 0)
            return QString("Elv√°rt mennyis√©g: %1 db\nHull√≥ audit sor ‚Äì optimaliz√°lt").arg(row.pickingQuantity);
        return "Nincs elv√°rt mennyis√©g ‚Äì hull√≥ audit sor";
    }

    if (row.context && row.context->group.isGroup()) {
        if (!row.isInOptimization)
            return "Ez az anyag egy auditcsoport tagja, de nem r√©sze az optimaliz√°ci√≥nak.";
        return QString("Elv√°rt mennyis√©g (anyagcsoport): %1 db").arg(row.context->totalExpected);
    }

    return row.isInOptimization
               ? QString("Elv√°rt mennyis√©g: %1 db").arg(row.pickingQuantity)
               : "Nincs elv√°rt mennyis√©g ‚Äì nem r√©sze az optimaliz√°ci√≥nak.";
}

inline QString formatMissingTooltip(const StorageAuditRow& row) {
    if (!row.isInOptimization || row.pickingQuantity == 0)
        return "Nincs hi√°nyz√≥ mennyis√©g ‚Äî nincs elv√°rt.";

    if (row.context && row.context->group.isGroup()) {
        int missing = std::max(0, row.context->totalExpected - row.context->totalActual);
        return QString("Hi√°nyz√≥ mennyis√©g (anyagcsoport): %1 db").arg(missing);
    }

    int missing = std::max(0, row.missingQuantity());
    return QString("Hi√°nyz√≥ mennyis√©g: %1 db").arg(missing);
}
}
