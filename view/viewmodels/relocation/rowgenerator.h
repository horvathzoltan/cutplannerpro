#pragma once

#include "common/tableutils/colorlogicutils.h"
#include "model/relocation/relocationinstruction.h"
#include "view/columnindexes/relocationplantable_columns.h"
#include "view/viewmodels/relocation/cellgenerator.h"
#include "view/viewmodels/tablerowviewmodel.h"
#include "view/viewmodels/tablecellviewmodel.h"
#include "view/cellhelpers/cellfactory.h"

#include <QColor>
#include <QObject>
#include <QPushButton>
#include <QHBoxLayout>
#include <QIcon>
#include <QStyle>

#include "common/styleprofiles/relocationcolors.h"

namespace Relocation::ViewModel::RowGenerator {

inline TableRowViewModel generateSumRow(const RelocationInstruction& instr) {

    TableRowViewModel vm;    
    vm.rowId = instr.rowId.isNull() ? QUuid::createUuid() : instr.rowId;

    // üé® √ñsszes√≠t≈ë sor sz√ºrke h√°tt√©rrel
    QColor bgColor = RelocationColors::SummaryBg; // s√∂t√©tebb, eg√©rsz√ºrke
    QColor fgColor = Qt::black;

    // Anyag
    vm.cells[RelocationPlanTableColumns::Material] =
        TableCellViewModel::fromText(instr.materialName,
                              QString("Anyag: %1").arg(instr.materialName),
                              bgColor, fgColor);

    // Vonalk√≥d
    vm.cells[RelocationPlanTableColumns::Barcode] =
        TableCellViewModel::fromText("‚Äî",
                              "√ñsszes√≠t≈ë sor, nincs vonalk√≥d",
                              bgColor, fgColor);

    // Mennyis√©g
    QString qtyText = QString("%1/%2 (%3 marad√©k + %4 odavitt)")
                          .arg(instr.coveredQty)
                          .arg(instr.plannedQuantity)
                          .arg(instr.usedFromRemaining)
                          .arg(instr.movedQty);

    QColor qtyColor;
    if (instr.uncoveredQty > 0) {
        qtyColor = RelocationColors::Uncovered;
    } else if (instr.auditedRemaining < instr.totalRemaining) {
        qtyColor = RelocationColors::NotAudited;
    } else {
        qtyColor = RelocationColors::Covered;
    }

    vm.cells[RelocationPlanTableColumns::Quantity] =
        TableCellViewModel::fromText(qtyText,
                              instr.summaryText,
                              bgColor, qtyColor);

    // Forr√°s / C√©l
    vm.cells[RelocationPlanTableColumns::Source] =
        TableCellViewModel::fromText("‚Äî", "√ñsszes√≠t≈ë sor", bgColor, fgColor);
    vm.cells[RelocationPlanTableColumns::Target] =
        TableCellViewModel::fromText("‚Äî", "√ñsszes√≠t≈ë sor", bgColor, fgColor);

    // T√≠pus
    vm.cells[RelocationPlanTableColumns::Type] =
        TableCellViewModel::fromText("Œ£ √ñsszes√≠t≈ë",
                              "√ñsszes√≠t≈ë sor az ig√©ny lefedetts√©g√©r≈ël",
                              bgColor, fgColor);

    return vm;
}

/// üîπ Teljes TableRowViewModel gener√°l√°sa egy RelocationInstruction alapj√°n
inline TableRowViewModel generate(const RelocationInstruction& instr,
                                  const MaterialMaster* mat,
                                  QObject* receiver = nullptr) {

    TableRowViewModel vm;

    vm.rowId = instr.rowId.isNull() ? QUuid::createUuid() : instr.rowId;

    if (instr.isSummary) {
        TableRowViewModel sum = generateSumRow(instr);
        sum.rowId = vm.rowId;
        return sum;
    }

    QColor baseColor = ColorLogicUtils::resolveBaseColor(mat);
    QColor fgColor   = baseColor.lightness() < 128 ? Qt::white : Qt::black;

    vm.cells[RelocationPlanTableColumns::Material] =
        TableCellViewModel::fromText(instr.materialName,
                              QString("Anyag: %1").arg(instr.materialName),
                              baseColor, fgColor);

    vm.cells[RelocationPlanTableColumns::Barcode] =
        TableCellViewModel::fromText(instr.barcode,
                              QString("Vonalk√≥d: %1").arg(instr.barcode),
                              baseColor, fgColor);

    QString qtyText = instr.isSatisfied
                          ? QStringLiteral("‚úî Megvan")
                          : QString::number(instr.plannedQuantity);

    QColor qtyColor = instr.isSatisfied
                          ? QColor("#228B22")
                          : (instr.plannedQuantity == 0 ? QColor("#B22222") : fgColor);

    vm.cells[RelocationPlanTableColumns::Quantity] =
        TableCellViewModel::fromText(qtyText,
                              QString("Terv szerinti mennyis√©g: %1").arg(instr.plannedQuantity),
                              baseColor, qtyColor);

    if (instr.sourceType == AuditSourceType::Stock) {
        QStringList sourceParts;
        for (const auto& src : instr.sources) {
            sourceParts << QString("%1 (%2/%3)")
            .arg(src.locationName)
                .arg(src.moved)
                .arg(src.available);
        }
        QString sourceText = sourceParts.isEmpty() ? QStringLiteral("‚Äî") : sourceParts.join(", ");
        vm.cells[RelocationPlanTableColumns::Source] =
            CellGenerator::createEditableCell(vm.rowId,
                                              sourceText,
                                              QString("Forr√°s t√°rhelyek: %1").arg(sourceText),
                                              receiver,
                                              "source");

        QStringList targetParts;
        for (const auto& tgt : instr.targets) {
            targetParts << QString("%1 (%2)")
            .arg(tgt.locationName)
                .arg(tgt.placed);
        }
        QString targetText = targetParts.isEmpty() ? QStringLiteral("‚Äî") : targetParts.join(", ");
        vm.cells[RelocationPlanTableColumns::Target] =
            CellGenerator::createEditableCell(vm.rowId,
                                              targetText,
                                              QString("C√©l t√°rhelyek: %1").arg(targetText),
                                              receiver,
                                              "target");
    } else {
        QString sourceText = instr.sources.isEmpty() ? QStringLiteral("‚Äî") : instr.sources.first().locationName;
        vm.cells[RelocationPlanTableColumns::Source] =
            TableCellViewModel::fromText(sourceText,
                                  QString("Hull√≥ forr√°s: %1").arg(sourceText),
                                  baseColor, fgColor);

        vm.cells[RelocationPlanTableColumns::Target] =
            TableCellViewModel::fromText(QStringLiteral("‚Äî"),
                                  QStringLiteral("Hull√≥n√°l nincs c√©l"),
                                  baseColor, fgColor);
    }

    QString typeText = (instr.sourceType == AuditSourceType::Stock)
                           ? QStringLiteral("üì¶ Stock")
                           : QStringLiteral("‚ôªÔ∏è Hull√≥");
    vm.cells[RelocationPlanTableColumns::Type] =
        TableCellViewModel::fromText(typeText,
                              QString("Forr√°s t√≠pusa: %1").arg(typeText),
                              baseColor, fgColor);

    // Finalize gomb cella (friss√≠tett logika)
    if (instr.sourceType == AuditSourceType::Stock) {
        QPushButton* btn = new QPushButton("Finalize");
        btn->setCursor(Qt::PointingHandCursor);

        qInfo() << "Row" << instr.rowId
                << "isFinalized=" << instr.isAlreadyFinalized()
                << "isLeftover=" << instr.isLeftover()
                << "hasTarget=" << instr.hasTarget()
                << "targets.size=" << instr.targets.size()
                << "planned=" << instr.plannedQuantity
                << "available=" << instr.availableQuantity();

        if (instr.isAlreadyFinalized()) {
            btn->setText("‚úî");
            btn->setEnabled(false);
            btn->setStyleSheet("background-color: #ccc; color: #666;");
            btn->setToolTip(QStringLiteral("A sor m√°r v√©gleges√≠tve lett."));
        } else if (instr.isLeftover()) {
            btn->setEnabled(false);
            btn->setStyleSheet("background-color: #eee; color: #999;");
            btn->setToolTip(QStringLiteral("Hullad√©kot nem finaliz√°lunk."));
        } else if (!instr.hasTarget()) {
            btn->setEnabled(false);
            btn->setStyleSheet("background-color: #eee; color: #999;");
            btn->setToolTip(QStringLiteral("Nincs c√©l. Hozz l√©tre c√©lt vagy v√°lassz megl√©v≈ët a sor szerkeszt√©s√©vel."));
        } else if (!instr.isReadyToFinalize()) {
            btn->setEnabled(false);
            btn->setStyleSheet("background-color: #eee; color: #999;");
            btn->setToolTip(QStringLiteral("A forr√°s nem tartalmaz elegend≈ë mennyis√©get a v√©gleges√≠t√©shez."));
        } else {
            btn->setEnabled(true);
            btn->setStyleSheet("background-color: #4CAF50; color: white; font-weight: bold;");
            btn->setToolTip(QStringLiteral("A sor v√©gleges√≠thet≈ë."));
        }

        QObject::connect(btn, &QPushButton::clicked, receiver, [receiver, rowId = instr.rowId]() {
            QMetaObject::invokeMethod(receiver, "finalizeRow", Qt::QueuedConnection,
                                      Q_ARG(QUuid, rowId));
        });

        vm.cells[RelocationPlanTableColumns::Finalize] =
            TableCellViewModel::fromWidget(btn, QStringLiteral("Finalize gomb"));
    } else {
        // Hull√≥n√°l ne legyen Finalize gomb ‚Äî √ºres, nem interakt√≠v cella
        vm.cells[RelocationPlanTableColumns::Finalize] =
            TableCellViewModel::fromText("-",
                                  QStringLiteral("Nincs finalize hull√≥n√°l"),
                                  baseColor, fgColor);
    }


    return vm;
}



} // namespace RelocationRowViewModelGenerator
